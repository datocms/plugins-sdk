/* eslint-disable camelcase */
/* tslint:disable */
/**
 * This file was automatically generated by hyperschema-to-ts: DO NOT MODIFY IT
 * BY HAND.
 */

/**
 * JSON API type field
 *
 * This interface was referenced by `Role`'s JSON-Schema via the `definition`
 * "type".
 */
export type RoleType = 'role';
/**
 * ID of role
 *
 * This interface was referenced by `Role`'s JSON-Schema via the `definition`
 * "identity".
 *
 * This interface was referenced by `Role`'s JSON-Schema via the `definition`
 * "id".
 */
export type RoleIdentity = string;
/**
 * ID of item type
 *
 * This interface was referenced by `ItemType`'s JSON-Schema via the
 * `definition` "identity".
 *
 * This interface was referenced by `ItemType`'s JSON-Schema via the
 * `definition` "id".
 */
export type ItemTypeIdentity = string;
/**
 * ID of workflow
 *
 * This interface was referenced by `Workflow`'s JSON-Schema via the
 * `definition` "identity".
 *
 * This interface was referenced by `Workflow`'s JSON-Schema via the
 * `definition` "id".
 */
export type WorkflowIdentity = string;
/**
 * ID of environment. Can only contain lowercase letters, numbers and dashes
 *
 * This interface was referenced by `Environment`'s JSON-Schema via the
 * `definition` "identity".
 *
 * This interface was referenced by `Environment`'s JSON-Schema via the
 * `definition` "id".
 */
export type EnvironmentIdentity = string;
/**
 * ID of build_trigger
 *
 * This interface was referenced by `BuildTrigger`'s JSON-Schema via the
 * `definition` "identity".
 *
 * This interface was referenced by `BuildTrigger`'s JSON-Schema via the
 * `definition` "id".
 */
export type BuildTriggerIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `User`'s JSON-Schema via the `definition`
 * "type".
 */
export type UserType = 'user';
/**
 * ID of collaborator
 *
 * This interface was referenced by `User`'s JSON-Schema via the `definition`
 * "identity".
 *
 * This interface was referenced by `User`'s JSON-Schema via the `definition`
 * "id".
 */
export type UserIdentity = string;
/**
 * This interface was referenced by `User`'s JSON-Schema via the
 * `self.hrefSchema` link.
 */
export type UserSelfHrefSchema = {
  /**
   * Comma-separated list of [relationship
   * paths](https://jsonapi.org/format/#fetching-includes). A relationship path
   * is a dot-separated list of relationship names. Allowed relationship paths:
   * `role`.
   */
  include?: string;
  [k: string]: unknown;
};
/**
 * JSON API type field
 *
 * This interface was referenced by `SsoUser`'s JSON-Schema via the `definition`
 * "type".
 */
export type SsoUserType = 'sso_user';
/**
 * ID of user
 *
 * This interface was referenced by `SsoUser`'s JSON-Schema via the `definition`
 * "identity".
 *
 * This interface was referenced by `SsoUser`'s JSON-Schema via the `definition`
 * "id".
 */
export type SsoUserIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `SsoGroup`'s JSON-Schema via the
 * `definition` "type".
 */
export type SsoGroupType = 'sso_group';
/**
 * ID of group
 *
 * This interface was referenced by `SsoGroup`'s JSON-Schema via the
 * `definition` "identity".
 *
 * This interface was referenced by `SsoGroup`'s JSON-Schema via the
 * `definition` "id".
 */
export type SsoGroupIdentity = string;
/**
 * This interface was referenced by `SsoUser`'s JSON-Schema via the
 * `destroy.hrefSchema` link.
 */
export type SsoUserDestroyHrefSchema = {
  /**
   * New owner for resources previously owned by the deleted SSO user. This
   * argument specifies the new owner type.
   */
  destination_user_type?: 'account' | 'user' | 'access_token' | 'sso_user';
  /**
   * New owner for resources previously owned by the deleted SSO user. This
   * argument specifies the new owner ID.
   */
  destination_user_id?: string;
  [k: string]: unknown;
};
/**
 * JSON API type field
 *
 * This interface was referenced by `AccessToken`'s JSON-Schema via the
 * `definition` "type".
 */
export type AccessTokenType = 'access_token';
/**
 * ID of access_token
 *
 * This interface was referenced by `AccessToken`'s JSON-Schema via the
 * `definition` "identity".
 *
 * This interface was referenced by `AccessToken`'s JSON-Schema via the
 * `definition` "id".
 */
export type AccessTokenIdentity = string;
/**
 * This interface was referenced by `AccessToken`'s JSON-Schema via the
 * `destroy.hrefSchema` link.
 */
export type AccessTokenDestroyHrefSchema = {
  /**
   * New owner for resources previously owned by the deleted access token. This
   * argument specifies the new owner type.
   */
  destination_user_type?: 'account' | 'user' | 'access_token' | 'sso_user';
  /**
   * New owner for resources previously owned by the deleted access token. This
   * argument specifies the new owner ID.
   */
  destination_user_id?: string;
  [k: string]: unknown;
};
/**
 * JSON API type field
 *
 * This interface was referenced by `Account`'s JSON-Schema via the `definition`
 * "type".
 */
export type AccountType = 'account';
/**
 * ID of account
 *
 * This interface was referenced by `Account`'s JSON-Schema via the `definition`
 * "identity".
 *
 * This interface was referenced by `Account`'s JSON-Schema via the `definition`
 * "id".
 */
export type AccountIdentity = string;
/**
 * This interface was referenced by `User`'s JSON-Schema via the `me.hrefSchema`
 * link.
 */
export type UserMeHrefSchema = {
  /**
   * Comma-separated list of [relationship
   * paths](https://jsonapi.org/format/#fetching-includes). A relationship path
   * is a dot-separated list of relationship names. Allowed relationship paths:
   * `role`.
   */
  include?: string;
  [k: string]: unknown;
};
/**
 * This interface was referenced by `User`'s JSON-Schema via the
 * `destroy.hrefSchema` link.
 */
export type UserDestroyHrefSchema = {
  /**
   * New owner for resources previously owned by the deleted user. This argument
   * specifies the new owner type.
   */
  destination_user_type?: 'account' | 'user' | 'access_token' | 'sso_user';
  /**
   * New owner for resources previously owned by the deleted user. This argument
   * specifies the new owner ID.
   */
  destination_user_id?: string;
  [k: string]: unknown;
};
/**
 * JSON API type field
 *
 * This interface was referenced by `AuditLogEvent`'s JSON-Schema via the
 * `definition` "type".
 */
export type AuditLogEventType = 'audit_log_event';
/**
 * ULID of event (https://github.com/ulid/spec)
 *
 * This interface was referenced by `AuditLogEvent`'s JSON-Schema via the
 * `definition` "identity".
 *
 * This interface was referenced by `AuditLogEvent`'s JSON-Schema via the
 * `definition` "id".
 */
export type AuditLogEventIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `SitePlan`'s JSON-Schema via the
 * `definition` "type".
 */
export type SitePlanType = 'site_plan';
/**
 * ID of plan
 *
 * This interface was referenced by `SitePlan`'s JSON-Schema via the
 * `definition` "identity".
 *
 * This interface was referenced by `SitePlan`'s JSON-Schema via the
 * `definition` "id".
 */
export type SitePlanIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `MenuItem`'s JSON-Schema via the
 * `definition` "type".
 */
export type MenuItemType = 'menu_item';
/**
 * ID of menu item
 *
 * This interface was referenced by `MenuItem`'s JSON-Schema via the
 * `definition` "identity".
 *
 * This interface was referenced by `MenuItem`'s JSON-Schema via the
 * `definition` "id".
 */
export type MenuItemIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `ItemType`'s JSON-Schema via the
 * `definition` "type".
 */
export type ItemTypeType = 'item_type';
/**
 * This interface was referenced by `MenuItem`'s JSON-Schema via the
 * `instances.hrefSchema` link.
 */
export type MenuItemInstancesHrefSchema = {
  filter?: {
    /** IDs to fetch, comma separated */
    ids: string;
  };
};
/**
 * JSON API type field
 *
 * This interface was referenced by `Item`'s JSON-Schema via the `definition`
 * "type".
 */
export type ItemType1 = 'item';
/**
 * ID of record
 *
 * This interface was referenced by `Item`'s JSON-Schema via the `definition`
 * "identity".
 *
 * This interface was referenced by `Item`'s JSON-Schema via the `definition`
 * "id".
 */
export type ItemIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `Field`'s JSON-Schema via the `definition`
 * "type".
 */
export type FieldType = 'field';
/**
 * ID of field
 *
 * This interface was referenced by `Field`'s JSON-Schema via the `definition`
 * "identity".
 *
 * This interface was referenced by `Field`'s JSON-Schema via the `definition`
 * "id".
 */
export type FieldIdentity = string;
/**
 * JSON API type fieldset
 *
 * This interface was referenced by `Fieldset`'s JSON-Schema via the
 * `definition` "type".
 */
export type FieldsetType = 'fieldset';
/**
 * ID of fieldset
 *
 * This interface was referenced by `Fieldset`'s JSON-Schema via the
 * `definition` "identity".
 *
 * This interface was referenced by `Fieldset`'s JSON-Schema via the
 * `definition` "id".
 */
export type FieldsetIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `Workflow`'s JSON-Schema via the
 * `definition` "type".
 */
export type WorkflowType = 'workflow';
/**
 * JSON API type field
 *
 * This interface was referenced by `Job`'s JSON-Schema via the `definition`
 * "type".
 */
export type JobType = 'job';
/**
 * ID of job
 *
 * This interface was referenced by `Job`'s JSON-Schema via the `definition`
 * "identity".
 *
 * This interface was referenced by `Job`'s JSON-Schema via the `definition`
 * "id".
 */
export type JobIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `Session`'s JSON-Schema via the `definition`
 * "type".
 */
export type SessionType = 'session';
/**
 * JSON web token for the session
 *
 * This interface was referenced by `Session`'s JSON-Schema via the `definition`
 * "identity".
 *
 * This interface was referenced by `Session`'s JSON-Schema via the `definition`
 * "id".
 */
export type SessionIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `Plugin`'s JSON-Schema via the `definition`
 * "type".
 */
export type PluginType = 'plugin';
/**
 * ID of plugin
 *
 * This interface was referenced by `Plugin`'s JSON-Schema via the `definition`
 * "identity".
 *
 * This interface was referenced by `Plugin`'s JSON-Schema via the `definition`
 * "id".
 */
export type PluginIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `JobResult`'s JSON-Schema via the
 * `definition` "type".
 */
export type JobResultType = 'job_result';
/**
 * ID of job result
 *
 * This interface was referenced by `JobResult`'s JSON-Schema via the
 * `definition` "identity".
 *
 * This interface was referenced by `JobResult`'s JSON-Schema via the
 * `definition` "id".
 */
export type JobResultIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `SubscriptionLimit`'s JSON-Schema via the
 * `definition` "type".
 */
export type SubscriptionLimitType = 'subscription_limit';
/**
 * ID of limit
 *
 * This interface was referenced by `SubscriptionLimit`'s JSON-Schema via the
 * `definition` "identity".
 *
 * This interface was referenced by `SubscriptionLimit`'s JSON-Schema via the
 * `definition` "id".
 */
export type SubscriptionLimitIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `SubscriptionFeature`'s JSON-Schema via the
 * `definition` "type".
 */
export type SubscriptionFeatureType = 'subscription_feature';
/**
 * ID of feature
 *
 * This interface was referenced by `SubscriptionFeature`'s JSON-Schema via the
 * `definition` "identity".
 *
 * This interface was referenced by `SubscriptionFeature`'s JSON-Schema via the
 * `definition` "id".
 */
export type SubscriptionFeatureIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `BuildEvent`'s JSON-Schema via the
 * `definition` "type".
 */
export type BuildEventType = 'build_event';
/**
 * ID of menu item
 *
 * This interface was referenced by `BuildEvent`'s JSON-Schema via the
 * `definition` "identity".
 *
 * This interface was referenced by `BuildEvent`'s JSON-Schema via the
 * `definition` "id".
 */
export type BuildEventIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `BuildTrigger`'s JSON-Schema via the
 * `definition` "type".
 */
export type BuildTriggerType = 'build_trigger';
/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `instances.hrefSchema` link.
 */
export type ItemInstancesHrefSchema = {
  /**
   * For Modular Content fields and Structured Text fields. If set, returns full
   * payload for nested blocks instead of IDs
   */
  nested?: string;
  /** Attributes to filter records */
  filter?: {
    /**
     * Record (or block record) IDs to fetch, comma separated. If you use this
     * filter, you _must not_ use `filter[type]` or `filter[fields]`
     */
    ids?: string;
    /**
     * Model ID or `api_key` to filter. If you use this filter, you _must not_
     * use `filter[ids]`. Comma separated values are accepted, but you _must
     * not_ use `filter[fields]` in this case
     */
    type?: string;
    /**
     * Textual query to match. You _must not_ use `filter[ids]`. If `locale` is
     * defined, search within that locale. Otherwise environment's main locale
     * will be used.
     */
    query?: string;
    /**
     * Same as [GraphQL API records
     * filters](/docs/content-delivery-api/filtering-records). Use snake_case
     * for fields names. If `locale` is defined, search within that locale.
     * Otherwise environment's main locale will be used.
     */
    fields?: {
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  /**
   * When `filter[query]` or `field[fields]` is defined, filter by this locale.
   * Default: environment's main locale
   */
  locale?: string;
  /** Attributes to manage results pagination */
  page?: {
    /** Index of first record to fetch (defaults to 0) */
    offset?: number;
    /** Number of records to fetch (defaults to 30, maximum is 500) */
    limit?: number;
    [k: string]: unknown;
  };
  /**
   * Fields used to order results. You _must_ specify also `filter[type]` with
   * one element only to be able use this option. Format:
   * `<field_name>_<DIRECTION(ASC|DESC)>`. You can pass multiple comma separated
   * rules
   */
  order_by?: string;
  /**
   * Whether you want the currently published versions (`published`, default) of
   * your records, or the latest available (`current`)
   */
  version?: string;
  [k: string]: unknown;
};
/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `references.hrefSchema` link.
 */
export type ItemReferencesHrefSchema = {
  /**
   * For Modular Content fields and Structured Text fields, return full payload
   * for nested blocks instead of IDs
   */
  nested?: 'true';
  /**
   * Retrieve only the selected type of version that is linked to the record;
   * current, published or both
   */
  version?: null | ('current' | 'published' | 'published-or-current');
  [k: string]: unknown;
};
/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `self.hrefSchema` link.
 */
export type ItemSelfHrefSchema = {
  /**
   * For Modular Content fields and Structured Text fields. If set, returns full
   * payload for nested blocks instead of IDs
   */
  nested?: string;
  /**
   * Whether you want the currently published versions (`published`, default) of
   * your records, or the latest available (`current`)
   */
  version?: string;
  [k: string]: unknown;
};
/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `batch_destroy.hrefSchema` link.
 */
export type ItemBatchDestroyHrefSchema = {
  /** IDs of records to delete, comma separated */
  'filter[ids]': string;
};
/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `batch_publish.hrefSchema` link.
 */
export type ItemBatchPublishHrefSchema = {
  /** IDs of records to publish, comma separated */
  'filter[ids]': string;
};
/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `batch_unpublish.hrefSchema` link.
 */
export type ItemBatchUnpublishHrefSchema = {
  /** IDs of records to unpublish, comma separated */
  'filter[ids]': string;
};
/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `publish.hrefSchema` link.
 */
export type ItemPublishHrefSchema = {
  /** If the record references other draft records, force a recursive publication */
  recursive?: string;
  [k: string]: unknown;
};
/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `unpublish.hrefSchema` link.
 */
export type ItemUnpublishHrefSchema = {
  /**
   * If the record is referenced by other published records, unpublish them
   * recursively
   */
  recursive?: string;
  [k: string]: unknown;
};
/**
 * JSON API type field
 *
 * This interface was referenced by `ItemVersion`'s JSON-Schema via the
 * `definition` "type".
 */
export type ItemVersionType = 'item_version';
/**
 * ID of record version
 *
 * This interface was referenced by `ItemVersion`'s JSON-Schema via the
 * `definition` "identity".
 *
 * This interface was referenced by `ItemVersion`'s JSON-Schema via the
 * `definition` "id".
 */
export type ItemVersionIdentity = string;
/**
 * This interface was referenced by `ItemVersion`'s JSON-Schema via the
 * `instances.hrefSchema` link.
 */
export type ItemVersionInstancesHrefSchema = {
  /**
   * For Modular Content fields and Structured Text fields. If set, returns full
   * payload for nested blocks instead of IDs
   */
  nested?: string;
  /** Attributes to manage results pagination */
  page?: {
    /** Index of first element to fetch (defaults to 0) */
    offset?: number;
    /** Number of elements to fetch (defaults to 15, maximum is 50) */
    limit?: number;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
/**
 * JSON API type upload
 *
 * This interface was referenced by `Upload`'s JSON-Schema via the `definition`
 * "type".
 */
export type UploadType = 'upload';
/**
 * ID of upload
 *
 * This interface was referenced by `Upload`'s JSON-Schema via the `definition`
 * "identity".
 *
 * This interface was referenced by `Upload`'s JSON-Schema via the `definition`
 * "id".
 */
export type UploadIdentity = string;
/**
 * This interface was referenced by `Upload`'s JSON-Schema via the
 * `instances.hrefSchema` link.
 */
export type UploadInstancesHrefSchema = {
  /** Attributes to filter uploads */
  filter?: {
    /** IDs to fetch, comma separated */
    ids?: string;
    /**
     * Textual query to match. If `locale` is defined, search within that
     * locale. Otherwise environment's main locale will be used.
     */
    query?: string;
    /**
     * Same as [GraphQL API uploads
     * filters](/docs/content-delivery-api/filtering-uploads). Use snake_case
     * for fields names. If `locale` is defined, search within that locale.
     * Otherwise environment's main locale will be used.
     */
    fields?: {
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  /**
   * When `filter[query]` or `field[fields]` is defined, filter by this locale.
   * Default: environment's main locale
   */
  locale?: string;
  /**
   * Fields used to order results. Format: `<field_name>_<DIRECTION(ASC|DESC)>`.
   * You can pass multiple comma separated rules.
   */
  order_by?: string;
  /** Attributes to manage results pagination */
  page?: {
    /** Index of first upload to fetch (defaults to 0) */
    offset?: number;
    /** Number of uplads to fetch (defaults to 30, maximum is 500) */
    limit?: number;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
/**
 * This interface was referenced by `Upload`'s JSON-Schema via the
 * `batch_add_tags.hrefSchema` link.
 */
export type UploadBatchAddTagsHrefSchema = {
  /** IDs to tag, comma separated */
  'filter[ids]'?: string;
  [k: string]: unknown;
};
/**
 * This interface was referenced by `Upload`'s JSON-Schema via the
 * `batch_destroy.hrefSchema` link.
 */
export type UploadBatchDestroyHrefSchema = {
  /** IDs to destroy, comma separated */
  'filter[ids]'?: string;
  [k: string]: unknown;
};
/**
 * This interface was referenced by `Upload`'s JSON-Schema via the
 * `references.hrefSchema` link.
 */
export type UploadReferencesHrefSchema = {
  /**
   * For Modular Content fields and Structured Text fields, return full payload
   * for nested blocks instead of IDs
   */
  nested?: string;
  /**
   * Retrieve only the selected type of version that is linked to the upload;
   * current, published or both
   */
  version?: null | ('current' | 'published' | 'published-or-current');
  [k: string]: unknown;
};
/**
 * JSON API type field
 *
 * This interface was referenced by `UploadRequest`'s JSON-Schema via the
 * `definition` "type".
 */
export type UploadRequestType = 'upload_request';
/**
 * The S3 path where the file will be stored
 *
 * This interface was referenced by `UploadRequest`'s JSON-Schema via the
 * `definition` "identity".
 *
 * This interface was referenced by `UploadRequest`'s JSON-Schema via the
 * `definition` "id".
 */
export type UploadRequestIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `ScheduledPublication`'s JSON-Schema via the
 * `definition` "type".
 */
export type ScheduledPublicationType = 'scheduled_publication';
/**
 * ID of scheduled_publication
 *
 * This interface was referenced by `ScheduledPublication`'s JSON-Schema via the
 * `definition` "identity".
 *
 * This interface was referenced by `ScheduledPublication`'s JSON-Schema via the
 * `definition` "id".
 */
export type ScheduledPublicationIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `ScheduledUnpublishing`'s JSON-Schema via
 * the `definition` "type".
 */
export type ScheduledUnpublishingType = 'scheduled_unpublishing';
/**
 * ID of scheduled_unpublishing
 *
 * This interface was referenced by `ScheduledUnpublishing`'s JSON-Schema via
 * the `definition` "identity".
 *
 * This interface was referenced by `ScheduledUnpublishing`'s JSON-Schema via
 * the `definition` "id".
 */
export type ScheduledUnpublishingIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `SearchResult`'s JSON-Schema via the
 * `definition` "type".
 */
export type SearchResultType = 'search_result';
/**
 * ID of result
 *
 * This interface was referenced by `SearchResult`'s JSON-Schema via the
 * `definition` "identity".
 *
 * This interface was referenced by `SearchResult`'s JSON-Schema via the
 * `definition` "id".
 */
export type SearchResultIdentity = string;
/**
 * This interface was referenced by `SearchResult`'s JSON-Schema via the
 * `instances.hrefSchema` link.
 */
export type SearchResultInstancesHrefSchema = {
  /** The query string to search */
  q: string;
  /** The build trigger ID on which the search will be performed */
  build_trigger_id?: string;
  /** Restrict the search on one locale */
  locale?: string;
  /** Maximum number of results to return (defaults to 20, maximum is 100) */
  limit?: number;
  /** Number of records to offset for the search */
  offset?: string;
  [k: string]: unknown;
};
/**
 * JSON API type field
 *
 * This interface was referenced by `Environment`'s JSON-Schema via the
 * `definition` "type".
 */
export type EnvironmentType = 'environment';
/**
 * JSON API type field
 *
 * This interface was referenced by `MaintenanceMode`'s JSON-Schema via the
 * `definition` "type".
 */
export type MaintenanceModeType = 'maintenance_mode';
/**
 * ID of maintenance_mode
 *
 * This interface was referenced by `MaintenanceMode`'s JSON-Schema via the
 * `definition` "identity".
 *
 * This interface was referenced by `MaintenanceMode`'s JSON-Schema via the
 * `definition` "id".
 */
export type MaintenanceModeIdentity = string;
/**
 * This interface was referenced by `MaintenanceMode`'s JSON-Schema via the
 * `activate.hrefSchema` link.
 */
export type MaintenanceModeActivateHrefSchema = {
  /** Force the activation, even if there are collaborators editing some records. */
  force?: boolean;
  [k: string]: unknown;
};
/**
 * JSON API type field
 *
 * This interface was referenced by `Webhook`'s JSON-Schema via the `definition`
 * "type".
 */
export type WebhookType = 'webhook';
/**
 * ID of webhook
 *
 * This interface was referenced by `Webhook`'s JSON-Schema via the `definition`
 * "identity".
 *
 * This interface was referenced by `Webhook`'s JSON-Schema via the `definition`
 * "id".
 */
export type WebhookIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `WebhookCall`'s JSON-Schema via the
 * `definition` "type".
 */
export type WebhookCallType = 'webhook_call';
/**
 * ID of webhook call
 *
 * This interface was referenced by `WebhookCall`'s JSON-Schema via the
 * `definition` "identity".
 *
 * This interface was referenced by `WebhookCall`'s JSON-Schema via the
 * `definition` "id".
 */
export type WebhookCallIdentity = string;
/**
 * This interface was referenced by `WebhookCall`'s JSON-Schema via the
 * `instances.hrefSchema` link.
 */
export type WebhookCallInstancesHrefSchema = {
  /** Params to manage results pagination */
  page?: {
    /** Index of first element to fetch (defaults to 0) */
    offset?: number;
    /** Number of elements to fetch (defaults to 30, maximum is 500) */
    limit?: number;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
/**
 * JSON API type field
 *
 * This interface was referenced by `ItemTypeFilter`'s JSON-Schema via the
 * `definition` "type".
 */
export type ItemTypeFilterType = 'item_type_filter';
/**
 * ID of filter
 *
 * This interface was referenced by `ItemTypeFilter`'s JSON-Schema via the
 * `definition` "identity".
 *
 * This interface was referenced by `ItemTypeFilter`'s JSON-Schema via the
 * `definition` "id".
 */
export type ItemTypeFilterIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `UploadFilter`'s JSON-Schema via the
 * `definition` "type".
 */
export type UploadFilterType = 'upload_filter';
/**
 * ID of filter
 *
 * This interface was referenced by `UploadFilter`'s JSON-Schema via the
 * `definition` "identity".
 *
 * This interface was referenced by `UploadFilter`'s JSON-Schema via the
 * `definition` "id".
 */
export type UploadFilterIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `SiteInvitation`'s JSON-Schema via the
 * `definition` "type".
 */
export type SiteInvitationType = 'site_invitation';
/**
 * ID of invitation
 *
 * This interface was referenced by `SiteInvitation`'s JSON-Schema via the
 * `definition` "identity".
 *
 * This interface was referenced by `SiteInvitation`'s JSON-Schema via the
 * `definition` "id".
 */
export type SiteInvitationIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `EditingSession`'s JSON-Schema via the
 * `definition` "type".
 */
export type EditingSessionType = 'editing_session';
/**
 * UUID of presence
 *
 * This interface was referenced by `EditingSession`'s JSON-Schema via the
 * `definition` "identity".
 *
 * This interface was referenced by `EditingSession`'s JSON-Schema via the
 * `definition` "id".
 */
export type EditingSessionIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `SsoSettings`'s JSON-Schema via the
 * `definition` "type".
 */
export type SsoSettingsType = 'sso_settings';
/**
 * ID
 *
 * This interface was referenced by `SsoSettings`'s JSON-Schema via the
 * `definition` "identity".
 *
 * This interface was referenced by `SsoSettings`'s JSON-Schema via the
 * `definition` "id".
 */
export type SsoSettingsIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `WhiteLabelSettings`'s JSON-Schema via the
 * `definition` "type".
 */
export type WhiteLabelSettingsType = 'white_label_settings';
/**
 * ID
 *
 * This interface was referenced by `WhiteLabelSettings`'s JSON-Schema via the
 * `definition` "identity".
 *
 * This interface was referenced by `WhiteLabelSettings`'s JSON-Schema via the
 * `definition` "id".
 */
export type WhiteLabelSettingsIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `PublicInfo`'s JSON-Schema via the
 * `definition` "type".
 */
export type PublicInfoType = 'public_info';
/**
 * ID of site
 *
 * This interface was referenced by `PublicInfo`'s JSON-Schema via the
 * `definition` "identity".
 *
 * This interface was referenced by `PublicInfo`'s JSON-Schema via the
 * `definition` "id".
 */
export type PublicInfoIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `DailyUsage`'s JSON-Schema via the
 * `definition` "type".
 */
export type DailyUsageType = 'daily_usage';
/**
 * ID of site
 *
 * This interface was referenced by `DailyUsage`'s JSON-Schema via the
 * `definition` "identity".
 *
 * This interface was referenced by `DailyUsage`'s JSON-Schema via the
 * `definition` "id".
 */
export type DailyUsageIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `UsageCounter`'s JSON-Schema via the
 * `definition` "type".
 */
export type UsageCounterType = 'usage_counter';
/**
 * Name of the counter
 *
 * This interface was referenced by `UsageCounter`'s JSON-Schema via the
 * `definition` "identity".
 *
 * This interface was referenced by `UsageCounter`'s JSON-Schema via the
 * `definition` "id".
 */
export type UsageCounterIdentity =
  | 'assets_path_bytes'
  | 'assets_referrer_bytes'
  | 'assets_ip_bytes'
  | 'assets_full_path_bytes'
  | 'assets_path_requests'
  | 'assets_full_path_requests'
  | 'cda_access_token_id_bytes'
  | 'cda_access_token_id_requests'
  | 'cda_referrer_bytes'
  | 'cda_referrer_requests'
  | 'cda_ip_bytes'
  | 'cda_ip_requests'
  | 'cma_endpoint_bytes'
  | 'cma_endpoint_requests'
  | 'cma_user_bytes'
  | 'cma_user_requests'
  | 'cma_ip_bytes'
  | 'cma_ip_requests'
  | 'video_path_seconds';
/**
 * This interface was referenced by `UsageCounter`'s JSON-Schema via the
 * `self.hrefSchema` link.
 */
export type UsageCounterSelfHrefSchema = {
  /** The time period upon which counters will be returned */
  period?: 'today' | 'current_month' | 'last_month';
};
/**
 * JSON API type field
 *
 * This interface was referenced by `UploadTag`'s JSON-Schema via the
 * `definition` "type".
 */
export type UploadTagType = 'upload_tag';
/**
 * ID of upload tag
 *
 * This interface was referenced by `UploadTag`'s JSON-Schema via the
 * `definition` "identity".
 *
 * This interface was referenced by `UploadTag`'s JSON-Schema via the
 * `definition` "id".
 */
export type UploadTagIdentity = string;
/**
 * This interface was referenced by `UploadTag`'s JSON-Schema via the
 * `instances.hrefSchema` link.
 */
export type UploadTagInstancesHrefSchema = {
  /** Attributes to filter tags */
  filter?: {
    /** Textual query to match. */
    query?: string;
    [k: string]: unknown;
  };
  /** Attributes to manage results pagination */
  page?: {
    /** Index of first tag to fetch (defaults to 0) */
    offset?: number;
    /** Number of tags to fetch (defaults to 50, maximum is 500) */
    limit?: number;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
/**
 * JSON API type field
 *
 * This interface was referenced by `UploadSmartTag`'s JSON-Schema via the
 * `definition` "type".
 */
export type UploadSmartTagType = 'upload_smart_tag';
/**
 * ID of upload tag
 *
 * This interface was referenced by `UploadSmartTag`'s JSON-Schema via the
 * `definition` "identity".
 *
 * This interface was referenced by `UploadSmartTag`'s JSON-Schema via the
 * `definition` "id".
 */
export type UploadSmartTagIdentity = string;
/**
 * This interface was referenced by `UploadSmartTag`'s JSON-Schema via the
 * `instances.hrefSchema` link.
 */
export type UploadSmartTagInstancesHrefSchema = {
  /** Attributes to filter tags */
  filter?: {
    /** Textual query to match. */
    query?: string;
    [k: string]: unknown;
  };
  /** Attributes to manage results pagination */
  page?: {
    /** Index of first tag to fetch (defaults to 0) */
    offset?: number;
    /** Number of tags to fetch (defaults to 50, maximum is 500) */
    limit?: number;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
/**
 * JSON API type field
 *
 * This interface was referenced by `Site`'s JSON-Schema via the `definition`
 * "type".
 */
export type SiteType = 'site';
/**
 * ID of site
 *
 * This interface was referenced by `Site`'s JSON-Schema via the `definition`
 * "identity".
 *
 * This interface was referenced by `Site`'s JSON-Schema via the `definition`
 * "id".
 */
export type SiteIdentity = string;
/**
 * This interface was referenced by `Site`'s JSON-Schema via the
 * `self.hrefSchema` link.
 */
export type SiteSelfHrefSchema = {
  /**
   * Comma-separated list of [relationship
   * paths](https://jsonapi.org/format/#fetching-includes). A relationship path
   * is a dot-separated list of relationship names. Allowed relationship paths:
   * `item_types`, `item_types.fields`, `item_types.fieldsets`,
   * `item_types.singleton_item`, `account`.
   */
  include?: string;
  [k: string]: unknown;
};

export interface DatoApi {
  role?: Role;
  user?: User;
  sso_user?: SsoUser;
  audit_log_event?: AuditLogEvent;
  account?: Account;
  site_plan?: SitePlan;
  menu_item?: MenuItem;
  item_type?: ItemType;
  field?: Field;
  fieldset?: Fieldset;
  job?: Job;
  session?: Session;
  access_token?: AccessToken;
  plugin?: Plugin;
  job_result?: JobResult;
  subscription_limit?: SubscriptionLimit;
  subscription_feature?: SubscriptionFeature;
  build_event?: BuildEvent;
  item?: Item;
  item_version?: ItemVersion;
  upload?: Upload;
  upload_request?: UploadRequest;
  scheduled_publication?: ScheduledPublication;
  scheduled_unpublishing?: ScheduledUnpublishing;
  search_result?: SearchResult;
  environment?: Environment;
  maintenance_mode?: MaintenanceMode;
  webhook?: Webhook;
  webhook_call?: WebhookCall;
  build_trigger?: BuildTrigger;
  item_type_filter?: ItemTypeFilter;
  upload_filter?: UploadFilter;
  site_invitation?: SiteInvitation;
  editing_session?: EditingSession;
  sso_group?: SsoGroup;
  sso_settings?: SsoSettings;
  white_label_settings?: WhiteLabelSettings;
  public_info?: PublicInfo;
  daily_usage?: DailyUsage;
  usage_counter?: UsageCounter;
  upload_tag?: UploadTag;
  upload_smart_tag?: UploadSmartTag;
  site?: Site;
  workflow?: Workflow;
  [k: string]: unknown;
}

/**
 * A Role represents a specific set of actions an editor (or an API token) can
 * perform on your administrative area.
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "role".
 */
export interface Role {
  type: RoleType;
  id: RoleIdentity;
  attributes: RoleAttributes;
  relationships: RoleRelationships;
  meta: RoleMeta;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `Role`'s JSON-Schema via the `definition`
 * "attributes".
 */
export interface RoleAttributes {
  /** The name of the role */
  name: string;
  /** Can edit favicon, global SEO settings and no-index policy */
  can_edit_favicon: boolean;
  /** Can change project name and 2FA settings */
  can_edit_site: boolean;
  /** Can create/edit models and plugins */
  can_edit_schema: boolean;
  /** Can customize content navigation bar */
  can_manage_menu: boolean;
  /** Can change locales, timezone and UI theme */
  can_edit_environment: boolean;
  /** Can promote environments to primary and manage maintenance mode */
  can_promote_environments: boolean;
  /** Specifies the environments the user can access */
  environments_access: 'all' | 'primary_only' | 'sandbox_only';
  /** Can create/edit roles and invite/remove collaborators */
  can_manage_users: boolean;
  /** Can create/edit shared filters (both for models and the media area) */
  can_manage_shared_filters?: boolean;
  /** Can create/edit Build triggers */
  can_manage_build_triggers: boolean;
  /** Can create/edit webhooks */
  can_manage_webhooks: boolean;
  /**
   * Can create/delete sandbox environments and promote them to primary
   * environment
   */
  can_manage_environments: boolean;
  /** Can manage Single Sign-On settings */
  can_manage_sso: boolean;
  /** Can access Audit Log */
  can_access_audit_log: boolean;
  /** Can create/edit workflows */
  can_manage_workflows: boolean;
  /** Can manage API tokens */
  can_manage_access_tokens: boolean;
  /** Can perform Site Search API calls */
  can_perform_site_search: boolean;
  /** Can access the build events log */
  can_access_build_events_log: boolean;
  /** Allowed actions on a model (or all) for a role */
  positive_item_type_permissions: {
    item_type?: ItemTypeIdentity | null;
    workflow?: WorkflowIdentity | null;
    on_stage?: null | string;
    to_stage?: null | string;
    environment: EnvironmentIdentity;
    /** Permitted action */
    action:
      | 'all'
      | 'read'
      | 'update'
      | 'create'
      | 'duplicate'
      | 'delete'
      | 'publish'
      | 'edit_creator'
      | 'take_over'
      | 'move_to_stage';
    /** Permitted creator */
    on_creator?: 'anyone' | 'self' | 'role' | null;
    /** Permitted content scope */
    localization_scope?: 'all' | 'localized' | 'not_localized' | null;
    /**
     * Permitted localized content in this locale. Required when
     * `localization_scope` is `localized`
     */
    locale?: string | null;
  }[];
  /** Prohibited actions on a model (or all) for a role */
  negative_item_type_permissions: {
    item_type?: ItemTypeIdentity | null;
    workflow?: WorkflowIdentity | null;
    on_stage?: null | string;
    to_stage?: null | string;
    environment: EnvironmentIdentity;
    /** Permitted action */
    action:
      | 'all'
      | 'read'
      | 'update'
      | 'create'
      | 'duplicate'
      | 'delete'
      | 'publish'
      | 'edit_creator'
      | 'take_over'
      | 'move_to_stage';
    /** Permitted creator */
    on_creator?: 'anyone' | 'self' | 'role' | null;
    /** Permitted content scope */
    localization_scope?: 'all' | 'localized' | 'not_localized' | null;
    /**
     * Permitted localized content in this locale. Required when
     * `localization_scope` is `localized`
     */
    locale?: string | null;
  }[];
  /** Allowed actions on a model (or all) for a role */
  positive_upload_permissions: {
    environment: EnvironmentIdentity;
    /** Permitted action */
    action:
      | 'all'
      | 'read'
      | 'update'
      | 'create'
      | 'delete'
      | 'edit_creator'
      | 'replace_asset';
    /** Permitted creator */
    on_creator?: 'anyone' | 'self' | 'role' | null;
    /** Permitted content scope */
    localization_scope?: 'all' | 'localized' | 'not_localized' | null;
    /**
     * Permitted localized content in this locale. Required when
     * `localization_scope` is `localized`
     */
    locale?: string | null;
  }[];
  /** Prohibited actions on a model (or all) for a role */
  negative_upload_permissions: {
    environment: EnvironmentIdentity;
    /** Permitted action */
    action:
      | 'all'
      | 'read'
      | 'update'
      | 'create'
      | 'delete'
      | 'edit_creator'
      | 'replace_asset';
    /** Permitted creator */
    on_creator?: 'anyone' | 'self' | 'role' | null;
    /** Permitted content scope */
    localization_scope?: 'all' | 'localized' | 'not_localized' | null;
    /**
     * Permitted localized content in this locale. Required when
     * `localization_scope` is `localized`
     */
    locale?: string | null;
  }[];
  /** Allowed build triggers for a role */
  positive_build_trigger_permissions: {
    build_trigger?: BuildTriggerIdentity | null;
  }[];
  /** Prohibited build triggers for a role */
  negative_build_trigger_permissions: {
    build_trigger?: BuildTriggerIdentity | null;
  }[];
}

/**
 * JSON API links
 *
 * This interface was referenced by `Role`'s JSON-Schema via the `definition`
 * "relationships".
 */
export interface RoleRelationships {
  /** The roles from which this role inherits permissions */
  inherits_permissions_from: {
    data: RoleData[];
  };
}

/**
 * JSON API data
 *
 * This interface was referenced by `Role`'s JSON-Schema via the `definition`
 * "data".
 */
export interface RoleData {
  type: RoleType;
  id: RoleIdentity;
}

/**
 * Meta information regarding the record
 *
 * This interface was referenced by `Role`'s JSON-Schema via the `definition`
 * "meta".
 */
export interface RoleMeta {
  /** The final set of permissions considering also inherited roles */
  final_permissions: {
    /** Can edit favicon, global SEO settings and no-index policy */
    can_edit_favicon: boolean;
    /** Can change project name and 2FA settings */
    can_edit_site: boolean;
    /** Can create/edit models and plugins */
    can_edit_schema: boolean;
    /** Can customize content navigation bar */
    can_manage_menu: boolean;
    /** Can change locales, timezone and UI theme */
    can_edit_environment: boolean;
    /** Can promote environments to primary and manage maintenance mode */
    can_promote_environments: boolean;
    /** Specifies the environments the user can access */
    environments_access: 'all' | 'primary_only' | 'sandbox_only';
    /** Can create/edit roles and invite/remove collaborators */
    can_manage_users: boolean;
    /** Can create/edit shared filters (both for models and the media area) */
    can_manage_shared_filters?: boolean;
    /** Can create/edit Build triggers */
    can_manage_build_triggers: boolean;
    /** Can create/edit webhooks */
    can_manage_webhooks: boolean;
    /**
     * Can create/delete sandbox environments and promote them to primary
     * environment
     */
    can_manage_environments: boolean;
    /** Can manage Single Sign-On settings */
    can_manage_sso: boolean;
    /** Can access Audit Log */
    can_access_audit_log: boolean;
    /** Can create/edit workflows */
    can_manage_workflows: boolean;
    /** Can manage API tokens */
    can_manage_access_tokens: boolean;
    /** Can perform Site Search API calls */
    can_perform_site_search: boolean;
    /** Can access the build events log */
    can_access_build_events_log: boolean;
    /** Allowed actions on a model (or all) for a role */
    positive_item_type_permissions: {
      item_type?: ItemTypeIdentity | null;
      workflow?: WorkflowIdentity | null;
      on_stage?: null | string;
      to_stage?: null | string;
      environment: EnvironmentIdentity;
      /** Permitted action */
      action:
        | 'all'
        | 'read'
        | 'update'
        | 'create'
        | 'duplicate'
        | 'delete'
        | 'publish'
        | 'edit_creator'
        | 'take_over'
        | 'move_to_stage';
      /** Permitted creator */
      on_creator?: 'anyone' | 'self' | 'role' | null;
      /** Permitted content scope */
      localization_scope?: 'all' | 'localized' | 'not_localized' | null;
      /**
       * Permitted localized content in this locale. Required when
       * `localization_scope` is `localized`
       */
      locale?: string | null;
    }[];
    /** Prohibited actions on a model (or all) for a role */
    negative_item_type_permissions: {
      item_type?: ItemTypeIdentity | null;
      workflow?: WorkflowIdentity | null;
      on_stage?: null | string;
      to_stage?: null | string;
      environment: EnvironmentIdentity;
      /** Permitted action */
      action:
        | 'all'
        | 'read'
        | 'update'
        | 'create'
        | 'duplicate'
        | 'delete'
        | 'publish'
        | 'edit_creator'
        | 'take_over'
        | 'move_to_stage';
      /** Permitted creator */
      on_creator?: 'anyone' | 'self' | 'role' | null;
      /** Permitted content scope */
      localization_scope?: 'all' | 'localized' | 'not_localized' | null;
      /**
       * Permitted localized content in this locale. Required when
       * `localization_scope` is `localized`
       */
      locale?: string | null;
    }[];
    /** Allowed actions on a model (or all) for a role */
    positive_upload_permissions: {
      environment: EnvironmentIdentity;
      /** Permitted action */
      action:
        | 'all'
        | 'read'
        | 'update'
        | 'create'
        | 'delete'
        | 'edit_creator'
        | 'replace_asset';
      /** Permitted creator */
      on_creator?: 'anyone' | 'self' | 'role' | null;
      /** Permitted content scope */
      localization_scope?: 'all' | 'localized' | 'not_localized' | null;
      /**
       * Permitted localized content in this locale. Required when
       * `localization_scope` is `localized`
       */
      locale?: string | null;
    }[];
    /** Prohibited actions on a model (or all) for a role */
    negative_upload_permissions: {
      environment: EnvironmentIdentity;
      /** Permitted action */
      action:
        | 'all'
        | 'read'
        | 'update'
        | 'create'
        | 'delete'
        | 'edit_creator'
        | 'replace_asset';
      /** Permitted creator */
      on_creator?: 'anyone' | 'self' | 'role' | null;
      /** Permitted content scope */
      localization_scope?: 'all' | 'localized' | 'not_localized' | null;
      /**
       * Permitted localized content in this locale. Required when
       * `localization_scope` is `localized`
       */
      locale?: string | null;
    }[];
    /** Allowed build triggers for a role */
    positive_build_trigger_permissions: {
      build_trigger?: BuildTriggerIdentity | null;
    }[];
    /** Prohibited build triggers for a role */
    negative_build_trigger_permissions: {
      build_trigger?: BuildTriggerIdentity | null;
    }[];
  };
}

/**
 * This interface was referenced by `Role`'s JSON-Schema via the `create.schema`
 * link.
 */
export interface RoleCreateSchema {
  data: {
    type: RoleType;
    /** JSON API attributes */
    attributes: {
      /** The name of the role */
      name: string;
      /** Can edit favicon, global SEO settings and no-index policy */
      can_edit_favicon?: boolean;
      /** Can change project name and 2FA settings */
      can_edit_site?: boolean;
      /** Can create/edit models and plugins */
      can_edit_schema?: boolean;
      /** Can customize content navigation bar */
      can_manage_menu?: boolean;
      /** Can change locales, timezone and UI theme */
      can_edit_environment?: boolean;
      /** Can promote environments to primary and manage maintenance mode */
      can_promote_environments?: boolean;
      /** Specifies the environments the user can access */
      environments_access?: 'all' | 'primary_only' | 'sandbox_only';
      /** Can create/edit roles and invite/remove collaborators */
      can_manage_users?: boolean;
      /** Can create/edit shared filters (both for models and the media area) */
      can_manage_shared_filters?: boolean;
      /** Can create/edit Build triggers */
      can_manage_build_triggers?: boolean;
      /** Can create/edit webhooks */
      can_manage_webhooks?: boolean;
      /**
       * Can create/delete sandbox environments and promote them to primary
       * environment
       */
      can_manage_environments?: boolean;
      /** Can manage Single Sign-On settings */
      can_manage_sso?: boolean;
      /** Can access Audit Log */
      can_access_audit_log?: boolean;
      /** Can create/edit workflows */
      can_manage_workflows?: boolean;
      /** Can manage API tokens */
      can_manage_access_tokens?: boolean;
      /** Can perform Site Search API calls */
      can_perform_site_search?: boolean;
      /** Can access the build events log */
      can_access_build_events_log?: boolean;
      /** Allowed actions on a model (or all) for a role */
      positive_item_type_permissions?: {
        item_type?: ItemTypeIdentity | null;
        workflow?: WorkflowIdentity | null;
        on_stage?: null | string;
        to_stage?: null | string;
        environment: EnvironmentIdentity;
        /** Permitted action */
        action:
          | 'all'
          | 'read'
          | 'update'
          | 'create'
          | 'duplicate'
          | 'delete'
          | 'publish'
          | 'edit_creator'
          | 'take_over'
          | 'move_to_stage';
        /** Permitted creator */
        on_creator?: 'anyone' | 'self' | 'role' | null;
        /** Permitted content scope */
        localization_scope?: 'all' | 'localized' | 'not_localized' | null;
        /**
         * Permitted localized content in this locale. Required when
         * `localization_scope` is `localized`
         */
        locale?: string | null;
      }[];
      /** Prohibited actions on a model (or all) for a role */
      negative_item_type_permissions?: {
        item_type?: ItemTypeIdentity | null;
        workflow?: WorkflowIdentity | null;
        on_stage?: null | string;
        to_stage?: null | string;
        environment: EnvironmentIdentity;
        /** Permitted action */
        action:
          | 'all'
          | 'read'
          | 'update'
          | 'create'
          | 'duplicate'
          | 'delete'
          | 'publish'
          | 'edit_creator'
          | 'take_over'
          | 'move_to_stage';
        /** Permitted creator */
        on_creator?: 'anyone' | 'self' | 'role' | null;
        /** Permitted content scope */
        localization_scope?: 'all' | 'localized' | 'not_localized' | null;
        /**
         * Permitted localized content in this locale. Required when
         * `localization_scope` is `localized`
         */
        locale?: string | null;
      }[];
      /** Allowed actions on a model (or all) for a role */
      positive_upload_permissions?: {
        environment: EnvironmentIdentity;
        /** Permitted action */
        action:
          | 'all'
          | 'read'
          | 'update'
          | 'create'
          | 'delete'
          | 'edit_creator'
          | 'replace_asset';
        /** Permitted creator */
        on_creator?: 'anyone' | 'self' | 'role' | null;
        /** Permitted content scope */
        localization_scope?: 'all' | 'localized' | 'not_localized' | null;
        /**
         * Permitted localized content in this locale. Required when
         * `localization_scope` is `localized`
         */
        locale?: string | null;
      }[];
      /** Prohibited actions on a model (or all) for a role */
      negative_upload_permissions?: {
        environment: EnvironmentIdentity;
        /** Permitted action */
        action:
          | 'all'
          | 'read'
          | 'update'
          | 'create'
          | 'delete'
          | 'edit_creator'
          | 'replace_asset';
        /** Permitted creator */
        on_creator?: 'anyone' | 'self' | 'role' | null;
        /** Permitted content scope */
        localization_scope?: 'all' | 'localized' | 'not_localized' | null;
        /**
         * Permitted localized content in this locale. Required when
         * `localization_scope` is `localized`
         */
        locale?: string | null;
      }[];
      /** Allowed build triggers for a role */
      positive_build_trigger_permissions?: {
        build_trigger?: BuildTriggerIdentity | null;
      }[];
      /** Prohibited build triggers for a role */
      negative_build_trigger_permissions?: {
        build_trigger?: BuildTriggerIdentity | null;
      }[];
    };
    /** JSON API links */
    relationships?: {
      /** The roles from which this role inherits permissions */
      inherits_permissions_from?: {
        data: RoleData[];
      };
    };
    meta?: RoleMeta;
  };
}

/**
 * This interface was referenced by `Role`'s JSON-Schema via the
 * `create.targetSchema` link.
 */
export interface RoleCreateTargetSchema {
  data: Role;
}

/**
 * This interface was referenced by `Role`'s JSON-Schema via the `update.schema`
 * link.
 */
export interface RoleUpdateSchema {
  data: {
    type: RoleType;
    id: RoleIdentity;
    /** JSON API attributes */
    attributes?: {
      /** The name of the role */
      name?: string;
      /** Can edit favicon, global SEO settings and no-index policy */
      can_edit_favicon?: boolean;
      /** Can change project name and 2FA settings */
      can_edit_site?: boolean;
      /** Can create/edit models and plugins */
      can_edit_schema?: boolean;
      /** Can customize content navigation bar */
      can_manage_menu?: boolean;
      /** Can change locales, timezone and UI theme */
      can_edit_environment?: boolean;
      /** Can promote environments to primary and manage maintenance mode */
      can_promote_environments?: boolean;
      /** Specifies the environments the user can access */
      environments_access?: 'all' | 'primary_only' | 'sandbox_only';
      /** Can create/edit roles and invite/remove collaborators */
      can_manage_users?: boolean;
      /** Can create/edit shared filters (both for models and the media area) */
      can_manage_shared_filters?: boolean;
      /** Can create/edit Build triggers */
      can_manage_build_triggers?: boolean;
      /** Can create/edit webhooks */
      can_manage_webhooks?: boolean;
      /**
       * Can create/delete sandbox environments and promote them to primary
       * environment
       */
      can_manage_environments?: boolean;
      /** Can manage Single Sign-On settings */
      can_manage_sso?: boolean;
      /** Can access Audit Log */
      can_access_audit_log?: boolean;
      /** Can create/edit workflows */
      can_manage_workflows?: boolean;
      /** Can manage API tokens */
      can_manage_access_tokens?: boolean;
      /** Can perform Site Search API calls */
      can_perform_site_search?: boolean;
      /** Can access the build events log */
      can_access_build_events_log?: boolean;
      /** Allowed actions on a model (or all) for a role */
      positive_item_type_permissions?: {
        item_type?: ItemTypeIdentity | null;
        workflow?: WorkflowIdentity | null;
        on_stage?: null | string;
        to_stage?: null | string;
        environment: EnvironmentIdentity;
        /** Permitted action */
        action:
          | 'all'
          | 'read'
          | 'update'
          | 'create'
          | 'duplicate'
          | 'delete'
          | 'publish'
          | 'edit_creator'
          | 'take_over'
          | 'move_to_stage';
        /** Permitted creator */
        on_creator?: 'anyone' | 'self' | 'role' | null;
        /** Permitted content scope */
        localization_scope?: 'all' | 'localized' | 'not_localized' | null;
        /**
         * Permitted localized content in this locale. Required when
         * `localization_scope` is `localized`
         */
        locale?: string | null;
      }[];
      /** Prohibited actions on a model (or all) for a role */
      negative_item_type_permissions?: {
        item_type?: ItemTypeIdentity | null;
        workflow?: WorkflowIdentity | null;
        on_stage?: null | string;
        to_stage?: null | string;
        environment: EnvironmentIdentity;
        /** Permitted action */
        action:
          | 'all'
          | 'read'
          | 'update'
          | 'create'
          | 'duplicate'
          | 'delete'
          | 'publish'
          | 'edit_creator'
          | 'take_over'
          | 'move_to_stage';
        /** Permitted creator */
        on_creator?: 'anyone' | 'self' | 'role' | null;
        /** Permitted content scope */
        localization_scope?: 'all' | 'localized' | 'not_localized' | null;
        /**
         * Permitted localized content in this locale. Required when
         * `localization_scope` is `localized`
         */
        locale?: string | null;
      }[];
      /** Allowed actions on a model (or all) for a role */
      positive_upload_permissions?: {
        environment: EnvironmentIdentity;
        /** Permitted action */
        action:
          | 'all'
          | 'read'
          | 'update'
          | 'create'
          | 'delete'
          | 'edit_creator'
          | 'replace_asset';
        /** Permitted creator */
        on_creator?: 'anyone' | 'self' | 'role' | null;
        /** Permitted content scope */
        localization_scope?: 'all' | 'localized' | 'not_localized' | null;
        /**
         * Permitted localized content in this locale. Required when
         * `localization_scope` is `localized`
         */
        locale?: string | null;
      }[];
      /** Prohibited actions on a model (or all) for a role */
      negative_upload_permissions?: {
        environment: EnvironmentIdentity;
        /** Permitted action */
        action:
          | 'all'
          | 'read'
          | 'update'
          | 'create'
          | 'delete'
          | 'edit_creator'
          | 'replace_asset';
        /** Permitted creator */
        on_creator?: 'anyone' | 'self' | 'role' | null;
        /** Permitted content scope */
        localization_scope?: 'all' | 'localized' | 'not_localized' | null;
        /**
         * Permitted localized content in this locale. Required when
         * `localization_scope` is `localized`
         */
        locale?: string | null;
      }[];
      /** Allowed build triggers for a role */
      positive_build_trigger_permissions?: {
        build_trigger?: BuildTriggerIdentity | null;
      }[];
      /** Prohibited build triggers for a role */
      negative_build_trigger_permissions?: {
        build_trigger?: BuildTriggerIdentity | null;
      }[];
    };
    /** JSON API links */
    relationships?: {
      /** The roles from which this role inherits permissions */
      inherits_permissions_from?: {
        data: RoleData[];
      };
    };
    meta?: RoleMeta;
  };
}

/**
 * This interface was referenced by `Role`'s JSON-Schema via the
 * `update.targetSchema` link.
 */
export interface RoleUpdateTargetSchema {
  data: Role;
}

/**
 * This interface was referenced by `Role`'s JSON-Schema via the
 * `instances.targetSchema` link.
 */
export interface RoleInstancesTargetSchema {
  data: Role[];
}

/**
 * This interface was referenced by `Role`'s JSON-Schema via the
 * `self.targetSchema` link.
 */
export interface RoleSelfTargetSchema {
  data: Role;
}

/**
 * This interface was referenced by `Role`'s JSON-Schema via the
 * `destroy.targetSchema` link.
 */
export interface RoleDestroyTargetSchema {
  data: Role;
}

/**
 * A DatoCMS administrative area can be accessed by multiple people. Every
 * collaborator is linked to a specific Role, which describes what actions it
 * will be able to perform once logged in.
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "user".
 */
export interface User {
  type: UserType;
  id: UserIdentity;
  attributes: UserAttributes;
  relationships: UserRelationships;
  meta?: UserMeta;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `User`'s JSON-Schema via the `definition`
 * "attributes".
 */
export interface UserAttributes {
  /** Email */
  email: string;
  /** Whether 2-factor authentication is active for this account or not */
  is_2fa_active: boolean;
  /** Full name */
  full_name: string;
  /** Whether the user is active or not */
  is_active: boolean;
}

/**
 * JSON API links
 *
 * This interface was referenced by `User`'s JSON-Schema via the `definition`
 * "relationships".
 */
export interface UserRelationships {
  /** Role */
  role: {
    data: RoleData;
  };
}

/**
 * Meta information on the user
 *
 * This interface was referenced by `User`'s JSON-Schema via the `definition`
 * "meta".
 */
export interface UserMeta {
  /** Date of last reading/interaction */
  last_access: string | null;
}

/**
 * JSON API data
 *
 * This interface was referenced by `User`'s JSON-Schema via the `definition`
 * "data".
 */
export interface UserData {
  type: UserType;
  id: UserIdentity;
}

/**
 * This interface was referenced by `User`'s JSON-Schema via the `update.schema`
 * link.
 */
export interface UserUpdateSchema {
  data: {
    type: UserType;
    id: UserIdentity;
    attributes?: {
      /** Whether the user is active or not */
      is_active: boolean;
    };
    relationships?: {
      /** Role */
      role: {
        data: RoleData;
      };
    };
  };
}

/**
 * This interface was referenced by `User`'s JSON-Schema via the
 * `update.targetSchema` link.
 */
export interface UserUpdateTargetSchema {
  data: User;
}

/**
 * This interface was referenced by `User`'s JSON-Schema via the
 * `instances.targetSchema` link.
 */
export interface UserInstancesTargetSchema {
  data: User[];
}

/**
 * This interface was referenced by `User`'s JSON-Schema via the
 * `self.targetSchema` link.
 */
export interface UserSelfTargetSchema {
  data: User;
  included?: Role[];
}

/**
 * This interface was referenced by `User`'s JSON-Schema via the
 * `me.targetSchema` link.
 */
export interface UserMeTargetSchema {
  data: User | SsoUser | AccessToken | Account;
  included?: Role[];
}

/**
 * A Single Sign-On user exists when a DatoCMS project is connected to an
 * external Identity Provider. An SSO user will not use the standard login
 * procedure but has to go through SAML authentication. It can also be linked to
 * one or more IdP groups.
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "sso_user".
 */
export interface SsoUser {
  type: SsoUserType;
  id: SsoUserIdentity;
  attributes: SsoUserAttributes;
  relationships: SsoUserRelationships;
  meta: SsoUserMeta;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `SsoUser`'s JSON-Schema via the `definition`
 * "attributes".
 */
export interface SsoUserAttributes {
  /** Email */
  username: string;
  /** Identity provider ID */
  external_id: string | null;
  /**
   * Whether this user is active on the identity provider. De-activated users
   * won't be able to login.
   */
  is_active: boolean;
  /** First name */
  first_name: string | null;
  /** Last name */
  last_name: string | null;
}

/**
 * JSON API links
 *
 * This interface was referenced by `SsoUser`'s JSON-Schema via the `definition`
 * "relationships".
 */
export interface SsoUserRelationships {
  /** All the users's groups */
  groups: {
    data: SsoGroupData[];
  };
  /** The user role */
  role: {
    data: RoleData | null;
  };
}

/**
 * JSON API data
 *
 * This interface was referenced by `SsoGroup`'s JSON-Schema via the
 * `definition` "data".
 */
export interface SsoGroupData {
  type: SsoGroupType;
  id: SsoGroupIdentity;
}

/**
 * Meta information on the user
 *
 * This interface was referenced by `SsoUser`'s JSON-Schema via the `definition`
 * "meta".
 */
export interface SsoUserMeta {
  /** Date of last reading/interaction */
  last_access: string | null;
}

/**
 * JSON API data
 *
 * This interface was referenced by `SsoUser`'s JSON-Schema via the `definition`
 * "data".
 */
export interface SsoUserData {
  type: SsoUserType;
  id: SsoUserIdentity;
}

/**
 * This interface was referenced by `SsoUser`'s JSON-Schema via the
 * `instances.targetSchema` link.
 */
export interface SsoUserInstancesTargetSchema {
  data: SsoUser[];
}

/**
 * This interface was referenced by `SsoUser`'s JSON-Schema via the
 * `self.targetSchema` link.
 */
export interface SsoUserSelfTargetSchema {
  data: SsoUser;
}

/**
 * This interface was referenced by `SsoUser`'s JSON-Schema via the
 * `copy_users.targetSchema` link.
 */
export interface SsoUserCopyUsersTargetSchema {
  data: SsoUser[];
}

/**
 * This interface was referenced by `SsoUser`'s JSON-Schema via the
 * `destroy.targetSchema` link.
 */
export interface SsoUserDestroyTargetSchema {
  data: SsoUser;
}

/**
 * An API token allows access to our API. It is linked to a Role, which
 * describes what actions can be performed.
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "access_token".
 */
export interface AccessToken {
  type: AccessTokenType;
  id: AccessTokenIdentity;
  attributes: AccessTokenAttributes;
  relationships: AccessTokenRelationships;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `AccessToken`'s JSON-Schema via the
 * `definition` "attributes".
 */
export interface AccessTokenAttributes {
  /** Name of API token */
  name: string;
  /**
   * The actual API token (or null if the current user has no permission to read
   * the token)
   */
  token?: null | string;
  /**
   * Whether this API token can access the Content Delivery API published
   * content endpoint
   */
  can_access_cda: boolean;
  /**
   * Whether this API token can access the Content Delivery API draft content
   * endpoint
   */
  can_access_cda_preview: boolean;
  /** Whether this API token can access the Content Management API */
  can_access_cma: boolean;
  hardcoded_type: null | string;
}

/**
 * JSON API links
 *
 * This interface was referenced by `AccessToken`'s JSON-Schema via the
 * `definition` "relationships".
 */
export interface AccessTokenRelationships {
  /** Role */
  role: {
    data: RoleData | null;
  };
}

/**
 * JSON API data
 *
 * This interface was referenced by `AccessToken`'s JSON-Schema via the
 * `definition` "data".
 */
export interface AccessTokenData {
  type: AccessTokenType;
  id: AccessTokenIdentity;
}

/**
 * This interface was referenced by `AccessToken`'s JSON-Schema via the
 * `create.schema` link.
 */
export interface AccessTokenCreateSchema {
  data: {
    type: AccessTokenType;
    attributes: {
      /** Name of API token */
      name: string;
      /**
       * Whether this API token can access the Content Delivery API published
       * content endpoint
       */
      can_access_cda: boolean;
      /**
       * Whether this API token can access the Content Delivery API draft
       * content endpoint
       */
      can_access_cda_preview: boolean;
      /** Whether this API token can access the Content Management API */
      can_access_cma: boolean;
    };
    relationships: {
      /** Role */
      role: {
        data: RoleData | null;
      };
    };
  };
}

/**
 * This interface was referenced by `AccessToken`'s JSON-Schema via the
 * `create.targetSchema` link.
 */
export interface AccessTokenCreateTargetSchema {
  data: AccessToken;
}

/**
 * This interface was referenced by `AccessToken`'s JSON-Schema via the
 * `update.schema` link.
 */
export interface AccessTokenUpdateSchema {
  data: {
    type: AccessTokenType;
    id: AccessTokenIdentity;
    attributes: {
      /** Name of API token */
      name: string;
      /**
       * Whether this API token can access the Content Delivery API published
       * content endpoint
       */
      can_access_cda: boolean;
      /**
       * Whether this API token can access the Content Delivery API draft
       * content endpoint
       */
      can_access_cda_preview: boolean;
      /** Whether this API token can access the Content Management API */
      can_access_cma: boolean;
    };
    relationships: {
      /** Role */
      role: {
        data: RoleData | null;
      };
    };
  };
}

/**
 * This interface was referenced by `AccessToken`'s JSON-Schema via the
 * `update.targetSchema` link.
 */
export interface AccessTokenUpdateTargetSchema {
  data: AccessToken;
}

/**
 * This interface was referenced by `AccessToken`'s JSON-Schema via the
 * `instances.targetSchema` link.
 */
export interface AccessTokenInstancesTargetSchema {
  data: AccessToken[];
}

/**
 * This interface was referenced by `AccessToken`'s JSON-Schema via the
 * `self.targetSchema` link.
 */
export interface AccessTokenSelfTargetSchema {
  data: AccessToken;
}

/**
 * This interface was referenced by `AccessToken`'s JSON-Schema via the
 * `regenerate_token.targetSchema` link.
 */
export interface AccessTokenRegenerateTokenTargetSchema {
  data: AccessToken;
}

/**
 * This interface was referenced by `AccessToken`'s JSON-Schema via the
 * `destroy.targetSchema` link.
 */
export interface AccessTokenDestroyTargetSchema {
  data: AccessToken;
}

/**
 * DatoCMS account
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "account".
 */
export interface Account {
  type: AccountType;
  id: AccountIdentity;
  attributes: AccountAttributes;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `Account`'s JSON-Schema via the `definition`
 * "attributes".
 */
export interface AccountAttributes {
  /** Email */
  email: string;
  /** First name */
  first_name: string | null;
  /** Last name */
  last_name: string | null;
  /** Company name */
  company: string | null;
  /** Password */
  password?: string;
}

/**
 * JSON API data
 *
 * This interface was referenced by `Account`'s JSON-Schema via the `definition`
 * "data".
 */
export interface AccountData {
  type: AccountType;
  id: AccountIdentity;
}

/**
 * This interface was referenced by `User`'s JSON-Schema via the
 * `destroy.targetSchema` link.
 */
export interface UserDestroyTargetSchema {
  data: User;
}

/**
 * If the Audit log functionality is enabled in a project, logged events can be
 * queried using SQL-like language and fetched in full detail so that they can
 * be exported or analyzed.
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "audit_log_event".
 */
export interface AuditLogEvent {
  type: AuditLogEventType;
  id: AuditLogEventIdentity;
  attributes: AuditLogEventAttributes;
  meta: AuditLogEventMeta;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `AuditLogEvent`'s JSON-Schema via the
 * `definition` "attributes".
 */
export interface AuditLogEventAttributes {
  /** The actual action performed */
  action_name: string;
  /** The actor who performed the action */
  actor: {
    /**
     * The type of actor (can be `account`, `user`, `sso_user` or
     * `access_token`)
     */
    type: string;
    /** The ID of the actor */
    id: string;
    /**
     * An human representation of the actor (name/email/username depending on
     * the type of actor)
     */
    name: string;
  };
  /** The role of the actor at the time the action was performed */
  role: null | {
    /** The name of the role */
    name: string;
    /** The ID of the role */
    id: string;
  };
  /** The environment inside of which the action was performed */
  environment: {
    /** The ID of the environment */
    id: string;
    /**
     * Whether the environment was the primary one at the time the action was
     * performed
     */
    primary: boolean;
  };
  /** The actual request being performed */
  request: {
    /** The full path of the request */
    path: string;
    /** The HTTP method of the request */
    method: string;
    /** The X-Request-ID header of the request */
    id?: string;
    /** The full HTTP body of the request */
    payload?: null | {
      [k: string]: unknown;
    };
  };
  /** The actual response being returned by DatoCMS */
  response: null | {
    /** The HTTP status code of the response */
    status: number;
    /** The full HTTP body of the response */
    payload: {
      [k: string]: unknown;
    };
  };
}

/**
 * JSON API meta
 *
 * This interface was referenced by `AuditLogEvent`'s JSON-Schema via the
 * `definition` "meta".
 */
export interface AuditLogEventMeta {
  /** The date of the event */
  occurred_at: string;
}

/**
 * JSON API data
 *
 * This interface was referenced by `AuditLogEvent`'s JSON-Schema via the
 * `definition` "data".
 */
export interface AuditLogEventData {
  type: AuditLogEventType;
  id: AuditLogEventIdentity;
}

/**
 * This interface was referenced by `AuditLogEvent`'s JSON-Schema via the
 * `query.schema` link.
 */
export interface AuditLogEventQuerySchema {
  data: {
    /** JSON API type field */
    type: 'audit_log_query';
    attributes: {
      /** An SQL-like expression to filter the events */
      filter?: string;
      /**
       * Set this value to get remaining results, if a meta.next_token was
       * returned in the previous query response
       */
      next_token?: string;
      /**
       * Whether a detailed log complete with full request and response payload
       * must be returned or not
       */
      detailed_log?: boolean;
    };
  };
}

/**
 * This interface was referenced by `AuditLogEvent`'s JSON-Schema via the
 * `query.targetSchema` link.
 */
export interface AuditLogEventQueryTargetSchema {
  data: AuditLogEvent[];
  meta: {
    /**
     * If the response request exceeds the response payload limit DatoCMS will
     * set this value in the response. If set, you can use that this value in
     * the subsequent request to get the remaining results
     */
    next_token: null | string;
  };
}

/**
 * Stores the information regarding the current plan for the project.
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "site_plan".
 */
export interface SitePlan {
  type: SitePlanType;
  id: SitePlanIdentity;
  attributes: SitePlanAttributes;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `SitePlan`'s JSON-Schema via the
 * `definition` "attributes".
 */
export interface SitePlanAttributes {
  /** The name of the plan */
  name: string;
  /** Whether this plan is active or legacy */
  active: boolean;
  /** Whether custom domain can be enabled or not */
  custom_domain: boolean;
  /** Number of users that can be invited */
  users: null | number;
  /** Number of indexable pages */
  indexable_pages: null | number;
  /** Number of build triggers */
  build_triggers: null | number;
  /** Number of plugins */
  plugins: null | number;
  /** Number of webhooks */
  webhooks: null | number;
  /** Number of records allowed */
  items: null | number;
  /** Monthly price */
  monthly_price: number;
  /** Yearly price */
  yearly_price: number;
  /** Uploadable bytes */
  uploadable_bytes: null | number;
  /**
   * Amount of asset data transferred between our Asset CDN and GraphQL Content
   * Delivery API and content consumers
   */
  traffic_bytes: null | number;
  /**
   * The number of requests made to both our Content Management and Content
   * Delivery APIs
   */
  api_calls: null | number;
  /** The number of streaming seconds delivered by Mux.com */
  mux_streaming_seconds: null | number;
  /** The number of available encoding seconds to Mux.com */
  mux_encoding_seconds: null | number;
  /**
   * The number of different API tokens you can generate, each which different
   * permissions
   */
  access_tokens: null | number;
  /** Number of roles allowed */
  roles: null | number;
  /** Number of locales allowed */
  locales: null | number;
  /** Number of sandbox environments allowed */
  sandbox_environments: null | number;
  /** Number of models allowed */
  item_types: null | number;
  /** Whether collaboration features are enabled or not */
  item_locking: boolean;
  /** Whether project is in white-label mode or not */
  white_label: boolean;
  /** Whether Single Sign-On feature is enabled or not */
  sso: boolean;
  /** Whether built-in image editor and smart-tagging is enabled or not */
  advanced_media_area: boolean;
  /** Maximum number of blocks a record can contain */
  blocks_per_item: number;
  /** Maximum level of block nesting for a record */
  blocks_depth: number;
  /** Whether video streaming with Mux.com is enabled or not */
  video: boolean;
  /** Days of version history retention */
  history_retention_days: number | null;
  /**
   * Maximum number of clients connected at the same time to the Realtime
   * Updates API. The limit is per-project
   */
  concurrent_realtime_connections: number;
  /**
   * Period (in minutes) in which bursts of changes made to the same record by
   * the same user (or API token) will be grouped into a single one
   */
  history_resolution_minutes: number;
  /** Whether two-factor authentication can be enabled or not */
  otp: boolean;
  /** Whether workflows are enabled or not */
  workflows: boolean;
  /** Number of workflows allowed */
  workflows_count: number;
  /** Whether audit logs are enabled or not */
  audit_log: boolean;
  /** Whether translator roles are enabled or not */
  translator_roles: boolean;
  /** Whether or not use a static IP when sending webhooks */
  static_webhooks_ip: boolean;
  /** Maximum size in bytes for a single file upload */
  maximum_single_upload_bytes: number;
  /** Available extra packets */
  extra_packets: {
    users?: {
      amount_per_packet: number;
      price: number;
    };
    locales?: {
      amount_per_packet: number;
      price: number;
    };
    item_types?: {
      amount_per_packet: number;
      price: number;
    };
    roles?: {
      amount_per_packet: number;
      price: number;
    };
    build_triggers?: {
      amount_per_packet: number;
      price: number;
    };
    access_tokens?: {
      amount_per_packet: number;
      price: number;
    };
    mux_encoding_seconds?: {
      amount_per_packet: number;
      price: number;
    };
    sandbox_environments?: {
      amount_per_packet: number;
      price: number;
    };
  };
  /** Automatic packets */
  auto_packets: {
    traffic_bytes?: {
      amount_per_packet: number;
      price: number;
    };
    api_calls?: {
      amount_per_packet: number;
      price: number;
    };
    mux_streaming_seconds?: {
      amount_per_packet: number;
      price: number;
    };
  };
}

/**
 * JSON API data
 *
 * This interface was referenced by `SitePlan`'s JSON-Schema via the
 * `definition` "data".
 */
export interface SitePlanData {
  type: SitePlanType;
  id: SitePlanIdentity;
}

/**
 * In DatoCMS you can organize the different Models present in your
 * administrative area reordering and grouping them, so that their purpose will
 * be more clear to the final editor.
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "menu_item".
 */
export interface MenuItem {
  type: MenuItemType;
  id: MenuItemIdentity;
  attributes: MenuItemAttributes;
  relationships: MenuItemRelationships;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `MenuItem`'s JSON-Schema via the
 * `definition` "attributes".
 */
export interface MenuItemAttributes {
  /** The label of the menu item */
  label: string;
  /** The URL to which the menu item points to */
  external_url: null | string;
  /** Ordering index */
  position: number;
  /** Opens link in new tab (used together with `external_url`) */
  open_in_new_tab: boolean;
}

/**
 * JSON API links
 *
 * This interface was referenced by `MenuItem`'s JSON-Schema via the
 * `definition` "relationships".
 */
export interface MenuItemRelationships {
  /** Item type associated with the menu item */
  item_type: {
    data: ItemTypeData | null;
  };
  /** Parent menu item */
  parent: {
    data: null | MenuItemData;
  };
  /** Underlying menu items */
  children: {
    data: MenuItemData[];
  };
}

/**
 * JSON API data
 *
 * This interface was referenced by `ItemType`'s JSON-Schema via the
 * `definition` "data".
 */
export interface ItemTypeData {
  type: ItemTypeType;
  id: ItemTypeIdentity;
}

/**
 * JSON API data
 *
 * This interface was referenced by `MenuItem`'s JSON-Schema via the
 * `definition` "data".
 */
export interface MenuItemData {
  type: MenuItemType;
  id: MenuItemIdentity;
}

/**
 * This interface was referenced by `MenuItem`'s JSON-Schema via the
 * `create.schema` link.
 */
export interface MenuItemCreateSchema {
  data: {
    type: MenuItemType;
    /** JSON API attributes */
    attributes: {
      /** The label of the menu item */
      label: string;
      /** The URL to which the menu item points to */
      external_url?: null | string;
      /** Ordering index */
      position: number;
      /** Opens link in new tab (used together with `external_url`) */
      open_in_new_tab?: boolean;
    };
    relationships?: {
      /** Item type associated with the menu item */
      item_type?: {
        data: ItemTypeData | null;
      };
      /** Parent menu item */
      parent?: {
        data: null | MenuItemData;
      };
    };
  };
}

/**
 * This interface was referenced by `MenuItem`'s JSON-Schema via the
 * `create.targetSchema` link.
 */
export interface MenuItemCreateTargetSchema {
  data: MenuItem;
}

/**
 * This interface was referenced by `MenuItem`'s JSON-Schema via the
 * `update.schema` link.
 */
export interface MenuItemUpdateSchema {
  data: {
    type: MenuItemType;
    id: MenuItemIdentity;
    /** JSON API attributes */
    attributes?: {
      /** The label of the menu item */
      label: string;
      /** The URL to which the menu item points to */
      external_url?: null | string;
      /** Ordering index */
      position: number;
      /** Opens link in new tab (used together with `external_url`) */
      open_in_new_tab?: boolean;
    };
    relationships?: {
      /** Item type associated with the menu item */
      item_type?: {
        data: ItemTypeData | null;
      };
      /** Parent menu item */
      parent?: {
        data: null | MenuItemData;
      };
    };
  };
}

/**
 * This interface was referenced by `MenuItem`'s JSON-Schema via the
 * `update.targetSchema` link.
 */
export interface MenuItemUpdateTargetSchema {
  data: MenuItem;
}

/**
 * This interface was referenced by `MenuItem`'s JSON-Schema via the
 * `instances.targetSchema` link.
 */
export interface MenuItemInstancesTargetSchema {
  data: MenuItem[];
}

/**
 * This interface was referenced by `MenuItem`'s JSON-Schema via the
 * `self.targetSchema` link.
 */
export interface MenuItemSelfTargetSchema {
  data: MenuItem;
}

/**
 * This interface was referenced by `MenuItem`'s JSON-Schema via the
 * `destroy.targetSchema` link.
 */
export interface MenuItemDestroyTargetSchema {
  data: MenuItem;
}

/**
 * The way you define the kind of content you can edit inside your
 * administrative area passes through the concept of Models, which are much like
 * database tables. For backward-compatibility reasons, the API refers to models
 * as "item types".
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "item_type".
 */
export interface ItemType {
  type: ItemTypeType;
  id: ItemTypeIdentity;
  attributes: ItemTypeAttributes;
  relationships: ItemTypeRelationships;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `ItemType`'s JSON-Schema via the
 * `definition` "attributes".
 */
export interface ItemTypeAttributes {
  /** Name of the model */
  name: string;
  /** API key of the model */
  api_key: string;
  /** The way the model collection should be presented to the editors */
  collection_appeareance: 'compact' | 'table';
  /** The way the model collection should be presented to the editors */
  collection_appearance: 'compact' | 'table';
  /** Whether the model is single-instance or not */
  singleton: boolean;
  /**
   * Whether we require all the project locales to be present for each localized
   * field or not
   */
  all_locales_required: boolean;
  /** Whether editors can sort records via drag & drop or not */
  sortable: boolean;
  /** Whether this model is a modular content block or not */
  modular_block: boolean;
  /** Whether draft/published mode is active or not */
  draft_mode_active: boolean;
  /** Whether editors can organize records in a tree or not */
  tree: boolean;
  /** If an ordering field is set, this fields specify the sorting direction */
  ordering_direction: null | 'asc' | 'desc';
  /**
   * Specifies the model's sorting method. Cannot be set in concurrency with
   * ordering_field
   */
  ordering_meta:
    | null
    | 'created_at'
    | 'updated_at'
    | 'first_published_at'
    | 'published_at';
  /**
   * If this model is single-instance, this tells the single-instance record has
   * already been created or not
   */
  has_singleton_item: boolean;
  /**
   * A hint shown to editors to help them understand the purpose of this
   * model/block
   */
  hint: string | null;
}

/**
 * JSON API links
 *
 * This interface was referenced by `ItemType`'s JSON-Schema via the
 * `definition` "relationships".
 */
export interface ItemTypeRelationships {
  /** The item instance related to this item type */
  singleton_item: {
    data: ItemData | null;
  };
  /** The list of item type fields */
  fields: {
    data: FieldData[];
  };
  /** The list of item type fieldsets */
  fieldsets: {
    data: FieldsetData[];
  };
  /** The field to use as display title */
  title_field: {
    data: FieldData | null;
  };
  /** The field to use as preview image */
  image_preview_field: {
    data: FieldData | null;
  };
  /** The field to use as fallback description for SEO purposes */
  excerpt_field: {
    data: FieldData | null;
  };
  /** The field upon which the collection is sorted */
  ordering_field: {
    data: FieldData | null;
  };
  /** The workflow to enforce on records */
  workflow: {
    data: WorkflowData | null;
  };
}

/**
 * JSON API data
 *
 * This interface was referenced by `Item`'s JSON-Schema via the `definition`
 * "data".
 */
export interface ItemData {
  type: ItemType1;
  id: ItemIdentity;
}

/**
 * JSON API data
 *
 * This interface was referenced by `Field`'s JSON-Schema via the `definition`
 * "data".
 */
export interface FieldData {
  type: FieldType;
  id: FieldIdentity;
}

/**
 * JSON API data
 *
 * This interface was referenced by `Fieldset`'s JSON-Schema via the
 * `definition` "data".
 */
export interface FieldsetData {
  type: FieldsetType;
  id: FieldsetIdentity;
}

/**
 * JSON API data
 *
 * This interface was referenced by `Workflow`'s JSON-Schema via the
 * `definition` "data".
 */
export interface WorkflowData {
  type: WorkflowType;
  id: WorkflowIdentity;
}

/**
 * This interface was referenced by `ItemType`'s JSON-Schema via the
 * `create.schema` link.
 */
export interface ItemTypeCreateSchema {
  data: {
    type: ItemTypeType;
    /** JSON API attributes */
    attributes: {
      /** Name of the model */
      name: string;
      /** API key of the model */
      api_key: string;
      /** Whether the model is single-instance or not */
      singleton?: boolean;
      /**
       * Whether we require all the project locales to be present for each
       * localized field or not
       */
      all_locales_required?: boolean;
      /** Whether editors can sort records via drag & drop or not */
      sortable?: boolean;
      /** Whether this model is a modular content block or not */
      modular_block?: boolean;
      /** Whether draft/published mode is active or not */
      draft_mode_active?: boolean;
      /** Whether editors can organize records in a tree or not */
      tree?: boolean;
      /** If an ordering field is set, this fields specify the sorting direction */
      ordering_direction?: null | 'asc' | 'desc';
      /**
       * Specifies the model's sorting method. Cannot be set in concurrency with
       * ordering_field
       */
      ordering_meta?:
        | null
        | 'created_at'
        | 'updated_at'
        | 'first_published_at'
        | 'published_at';
      /** The way the model collection should be presented to the editors */
      collection_appeareance?: 'compact' | 'table';
      /** The way the model collection should be presented to the editors */
      collection_appearance?: 'compact' | 'table';
      /**
       * A hint shown to editors to help them understand the purpose of this
       * model/block
       */
      hint?: string | null;
    };
    relationships?: {
      /** The field upon which the collection is sorted */
      ordering_field?: {
        data: FieldData | null;
      };
      /** The field to use as display title */
      title_field?: {
        data: FieldData | null;
      };
      /** The field to use as preview image */
      image_preview_field?: {
        data: FieldData | null;
      };
      /** The field to use as fallback description for SEO purposes */
      excerpt_field?: {
        data: FieldData | null;
      };
      /** The workflow to enforce on records */
      workflow?: {
        data: WorkflowData | null;
      };
    };
  };
}

/**
 * This interface was referenced by `ItemType`'s JSON-Schema via the
 * `create.targetSchema` link.
 */
export interface ItemTypeCreateTargetSchema {
  data: ItemType;
  included?: MenuItem[];
}

/**
 * This interface was referenced by `ItemType`'s JSON-Schema via the
 * `update.schema` link.
 */
export interface ItemTypeUpdateSchema {
  data: {
    type: ItemTypeType;
    id: ItemTypeIdentity;
    /** JSON API attributes */
    attributes?: {
      /** Name of the model */
      name?: string;
      /** API key of the model */
      api_key?: string;
      /** The way the model collection should be presented to the editors */
      collection_appeareance?: 'compact' | 'table';
      /** The way the model collection should be presented to the editors */
      collection_appearance?: 'compact' | 'table';
      /** Whether the model is single-instance or not */
      singleton?: boolean;
      /**
       * Whether we require all the project locales to be present for each
       * localized field or not
       */
      all_locales_required?: boolean;
      /** Whether editors can sort records via drag & drop or not */
      sortable?: boolean;
      /** Whether this model is a modular content block or not */
      modular_block?: boolean;
      /** Whether draft/published mode is active or not */
      draft_mode_active?: boolean;
      /** Whether editors can organize records in a tree or not */
      tree?: boolean;
      /** If an ordering field is set, this fields specify the sorting direction */
      ordering_direction?: null | 'asc' | 'desc';
      /**
       * Specifies the model's sorting method. Cannot be set in concurrency with
       * ordering_field
       */
      ordering_meta?:
        | null
        | 'created_at'
        | 'updated_at'
        | 'first_published_at'
        | 'published_at';
      /**
       * If this model is single-instance, this tells the single-instance record
       * has already been created or not
       */
      has_singleton_item?: boolean;
      /**
       * A hint shown to editors to help them understand the purpose of this
       * model/block
       */
      hint?: string | null;
    };
    relationships?: {
      /** The field upon which the collection is sorted */
      ordering_field?: {
        data: FieldData | null;
      };
      /** The field to use as display title */
      title_field?: {
        data: FieldData | null;
      };
      /** The field to use as preview image */
      image_preview_field?: {
        data: FieldData | null;
      };
      /** The field to use as fallback description for SEO purposes */
      excerpt_field?: {
        data: FieldData | null;
      };
      /** The workflow to enforce on records */
      workflow?: {
        data: WorkflowData | null;
      };
    };
  };
}

/**
 * This interface was referenced by `ItemType`'s JSON-Schema via the
 * `update.targetSchema` link.
 */
export interface ItemTypeUpdateTargetSchema {
  data: Job;
}

/**
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "job".
 */
export interface Job {
  type: JobType;
  id: JobIdentity;
}

/**
 * JSON API data
 *
 * This interface was referenced by `Job`'s JSON-Schema via the `definition`
 * "data".
 */
export interface JobData {
  type: JobType;
  id: JobIdentity;
}

/**
 * This interface was referenced by `ItemType`'s JSON-Schema via the
 * `update.jobSchema` link.
 */
export interface ItemTypeUpdateJobSchema {
  data: ItemType;
}

/**
 * This interface was referenced by `ItemType`'s JSON-Schema via the
 * `instances.targetSchema` link.
 */
export interface ItemTypeInstancesTargetSchema {
  data: ItemType[];
}

/**
 * This interface was referenced by `ItemType`'s JSON-Schema via the
 * `self.targetSchema` link.
 */
export interface ItemTypeSelfTargetSchema {
  data: ItemType;
}

/**
 * This interface was referenced by `ItemType`'s JSON-Schema via the
 * `duplicate.targetSchema` link.
 */
export interface ItemTypeDuplicateTargetSchema {
  data: ItemType;
}

/**
 * This interface was referenced by `ItemType`'s JSON-Schema via the
 * `destroy.targetSchema` link.
 */
export interface ItemTypeDestroyTargetSchema {
  data: Job;
}

/**
 * This interface was referenced by `ItemType`'s JSON-Schema via the
 * `destroy.jobSchema` link.
 */
export interface ItemTypeDestroyJobSchema {
  data: ItemType;
}

/**
 * DatoCMS offers a number of different fields that you can combine togheter to
 * create a [Model](/docs/content-management-api/resources/item-type). Using the
 * database metaphore, fields are like table columns, and when creating them you
 * need to specify their type (`string`, `float`, etc.) and any required
 * validation.
 *
 * ### Different field types require different settings
 *
 * When looking at a field resource, you have to pay attention to two particular
 * properties, `validators` and `appearance`.
 *
 * The `validators` property expresses the set of validations to be performed
 * server-side on a specific field value for it to be considered valid, while
 * the `appearance` property lets you specify _how_ the field itself will be
 * presented inside the form to the final editor.
 *
 * For both properties, the value to specify depends on the type of field
 * itself. For example, you can add a "Limit character count" validation to a
 * _Single-line string_ field, or set its appearence to "Show it as heading",
 * but they won't be accepted for a ie. _Color_ field, as it supports different
 * validations and appearance settings.
 *
 * ### Specifying validations
 *
 * The `validators` property requires an object whose keys are the validations
 * that you want to be enforced, and the values are objects representing any
 * settings that the validation itself requires. If the validation doesn't have
 * additional settings, you just pass down an empty object.
 *
 * This is a valid example for a _Single-line string_ field:
 *
 * ```js
 * {
 *   "validators": {
 *     // "required" validator has no settings
 *     "required": {},
 *     // "length" validator requires "min" and/or "max" properties
 *     "length": { "min": 80 }
 *   }
 * }
 * ```
 *
 * Below you'll find a summary of all the validators available for each field
 * type with their settings.
 *
 * Some validators are required for a specific type of field. For example, the
 * _Slug_ field needs to have a `slug_title_field` validator to specify the ID
 * of the _Single-line string_ field that will be used to generate the slug
 * itself.
 *
 * ### Specifying the appearance
 *
 * The `appearance` property requires an object with three specific properties:
 * `editor`, `parameters` and `addons`.
 *
 * The `editor` represents the type of editor that the users will see inside the
 * form to change the value of this specific field. Depending on the type of
 * field, DatoCMS offers a number of different editors for you to choose from.
 * The `parameters` property is an object representing any additional settings
 * that the editor itself might require.
 *
 * This is a valid example for a _Single-line string_ field:
 *
 * ```js
 * {
 *   "appearance": {
 *     // single_line is a DatoCMS built-in editor that you can use with single-line string fields
 *     "editor": "single_line",
 *     // each built-in editor has specific settings
 *     "parameters": { "heading": true },
 *     "addons": []
 *   }
 * }
 * ```
 *
 * Following you'll find a summary of all the editors available for each field
 * type with their settings.
 *
 * #### Setting the appearance to a field editor provided by a plugin
 *
 * If the project contains a plugin that exposes [manual field
 * editors](/docs/plugin-sdk/manual-field-extensions), you can also configure
 * the field to be presented with it instead of using one of the build-in
 * editors.
 *
 * In this case:
 *
 * - The `editor` property must be the ID of the plugin;
 * - The `field_extension` property must be the ID of the specific manual field
 *   editor that the plugin exposes;
 * - The `parameters` property must provide a configuration object compatible with
 *   the [config screen of the manual field
 *   extension](/docs/plugin-sdk/manual-field-extensions#add-per-field-config-screens-to-manual-field-extensions),
 *   or an empty object if it doesn't require any configuration.
 *
 * ```js
 * {
 *   "appearance": {
 *     // "2132" is a the ID of a plugin exposing a manual field editor
 *     "editor": "2134",
 *     // "starRating" is a manual field editor exposed by the plugin
 *     "field_extension": "starRating",
 *     // this is a valid configuration for the "starRating" field editor
 *     "parameters": { "maxRating": 5, "starsColor": "#ff0000" },
 *     "addons": []
 *   }
 * }
 * ```
 *
 * #### Configuring manual field addons
 *
 * If the project contains plugins that expose [manual field
 * addons](/docs/plugin-sdk/manual-field-extensions), you can also add them to
 * the field via the `addons` property.
 *
 * ```js
 * {
 *   "appearance": {
 *     "editor": "single_line",
 *     "parameters": { "heading": true },
 *     "addons": [
 *       {
 *         // "2138" is a the ID of a plugin exposing a manual addon editor
 *         "id": "2138",
 *         // "loremIpsumGenerator" is a manual field addon exposed by the plugin
 *         "field_extension": "loremIpsumGenerator",
 *         // this is a valid configuration for the "loremIpsumGenerator" field addon
 *         "parameters": { "sentences": 2 }
 *       }
 *     ]
 *   }
 * }
 * ```
 *
 * ### Available field types<details><summary>Single-line string (<code>string</code>)</summary>
 *
 * | Property                       | Value                                                |
 * | ------------------------------ | ---------------------------------------------------- | ------------------- | ------------------------------------------------------ |
 * | Code                           | `string`                                             |
 * | Built-in editors for the field | `single_line`, `string_radio_group`, `string_select` |
 * | Available validators           | `required`, `unique`, `length`, `format`, `enum`     | </details><details> | <summary>Multi-line text (<code>text</code>)</summary> |
 *
 * | Property | Value |
 *
 * | ------------------------------ | --------------------------------- | ------------------- |
 * | Code | `text` |
 * | Built-in editors for the field | `markdown`, `wysiwyg`, `textarea` |
 * | Available validators | `required`, `length`, `format` | </details><details> |<summary>Boolean (<code>boolean</code>)</summary>
 *
 * | Property | Value |
 *
 * | ------------------------------ | -------------------------------- | ------------------- |
 * | Code | `boolean` |
 * | Built-in editors for the field | `boolean`, `boolean_radio_group` |
 * | Available validators | no validators available | </details><details> |<summary>Integer (<code>integer</code>)</summary>
 *
 * | Property | Value |
 *
 * | ------------------------------ | -------------------------- | ------------------- |
 * | Code | `integer` |
 * | Built-in editors for the field | `integer` |
 * | Available validators | `required`, `number_range` | </details><details> |<summary>Float (<code>float</code>)</summary>
 *
 * | Property | Value |
 *
 * | ------------------------------ | -------------------------- | ------------------- |
 * | Code | `float` |
 * | Built-in editors for the field | `float` |
 * | Available validators | `required`, `number_range` | </details><details> |<summary>Date (<code>date</code>)</summary>
 *
 * | Property | Value |
 *
 * | ------------------------------ | ------------------------ | ------------------- |
 * | Code | `date` |
 * | Built-in editors for the field | `date_picker` |
 * | Available validators | `required`, `date_range` | </details><details> |<summary>Date time (<code>date_time</code>)</summary>
 *
 * | Property | Value |
 *
 * | ------------------------------ | ----------------------------- | ------------------- |
 * | Code | `date_time` |
 * | Built-in editors for the field | `date_time_picker` |
 * | Available validators | `required`, `date_time_range` | </details><details> |<summary>Color (<code>color</code>)</summary>
 *
 * | Property | Value |
 *
 * | ------------------------------ | -------------- | ------------------- |
 * | Code | `color` |
 * | Built-in editors for the field | `color_picker` |
 * | Available validators | `required` | </details><details> |<summary>JSON (<code>json</code>)</summary>
 *
 * | Property | Value |
 *
 * | ------------------------------ | ------------------------------------------------------ | ------------------- |
 * | Code | `json` |
 * | Built-in editors for the field | `json`, `string_multi_select`, `string_checkbox_group` |
 * | Available validators | `required` | </details><details> |<summary>Location (<code>lat_lon</code>)</summary>
 *
 * | Property | Value |
 *
 * | ------------------------------ | ---------- | ------------------- |
 * | Code | `lat_lon` |
 * | Built-in editors for the field | `map` |
 * | Available validators | `required` | </details><details> |<summary>SEO (<code>seo</code>)</summary>
 *
 * | Property | Value |
 *
 * | ------------------------------ | -------------------------------------------------------------------------------------------- | ------------------- |
 * | Code | `seo` |
 * | Built-in editors for the field | `seo` |
 * | Available validators | `required_seo_fields`, `file_size`, `image_dimensions`, `title_length`, `description_length` | </details><details> |<summary>Slug (<code>slug</code>)</summary>
 *
 * | Property | Value |
 *
 * | ------------------------------ | ----------------------------------- | ------------------- |
 * | Code | `slug` |
 * | Built-in editors for the field | `slug` |
 * | Required validators | `slug_title_field` |
 * | Other validators available | `required`, `length`, `slug_format` | </details><details> |<summary>External video (<code>video</code>)</summary>
 *
 * | Property | Value |
 *
 * | ------------------------------ | ---------- | ------------------- |
 * | Code | `video` |
 * | Built-in editors for the field | `video` |
 * | Available validators | `required` | </details><details> |<summary>Single-asset (<code>file</code>)</summary>
 *
 * | Property | Value |
 *
 * | ------------------------------ | ------------------------------------------------------------------------------ | ------------------- |
 * | Code | `file` |
 * | Built-in editors for the field | `file` |
 * | Available validators | `required`, `file_size`, `image_dimensions`, `extension`, `required_alt_title` | </details><details> |<summary>Asset gallery (<code>gallery</code>)</summary>
 *
 * | Property | Value |
 *
 * | ------------------------------ | -------------------------------------------------------------------------- | ------------------- |
 * | Code | `gallery` |
 * | Built-in editors for the field | `gallery` |
 * | Available validators | `size`, `file_size`, `image_dimensions`, `extension`, `required_alt_title` | </details><details> |<summary>Single link (<code>link</code>)</summary>
 *
 * | Property | Value |
 *
 * | ------------------------------ | --------------------------- | ------------------- |
 * | Code | `link` |
 * | Built-in editors for the field | `link_select`, `link_embed` |
 * | Default `editor` | `link_select` |
 * | Required validators | `item_item_type` |
 * | Other validators available | `required`, `unique` | </details><details> |<summary>Multiple links (<code>links</code>)</summary>
 *
 * | Property | Value |
 *
 * | ------------------------------ | ----------------------------- | ------------------- |
 * | Code | `links` |
 * | Built-in editors for the field | `links_select`, `links_embed` |
 * | Default `editor` | `links_select` |
 * | Required validators | `items_item_type` |
 * | Other validators available | `size` | </details><details> |<summary>Modular content (<code>rich_text</code>)</summary>
 *
 * | Property | Value |
 *
 * | ------------------------------ | ------------------ | ------------------- |
 * | Code | `rich_text` |
 * | Built-in editors for the field | `rich_text` |
 * | Required validators | `rich_text_blocks` |
 * | Other validators available | `size` | </details><details> |<summary>Structured text (<code>structured_text</code>)</summary>
 *
 * | Property | Value |
 *
 * | ------------------------------ | ------------------------------------------------- | ---------- |
 * | Code | `structured_text` |
 * | Built-in editors for the field | `structured_text` |
 * | Required validators | `structured_text_blocks`, `structured_text_links` |
 * | Other validators available | `length` | </details> |
 *
 * ### Validators<details><summary><code>date_range</code></summary>
 *
 * Accept dates only inside a specified date range.
 *
 * | Parameter | Type          | Required | Description  |
 * | --------- | ------------- | -------- | ------------ |
 * | `min`     | ISO 8601 date |          | Minimum date |
 * | `max`     | ISO 8601 date |          | Maximum date |
 *
 * At least one of the parameters must be
 * specified.</details><details><summary><code>date_time_range</code></summary>
 *
 * Accept date times only inside a specified date range.
 *
 * | Parameter | Type              | Required | Description      |
 * | --------- | ----------------- | -------- | ---------------- |
 * | `min`     | ISO 8601 datetime |          | Minimum datetime |
 * | `max`     | ISO 8601 datetime |          | Maximum datetime |
 *
 * At least one of the parameters must be
 * specified.</details><details><summary><code>enum</code></summary>
 *
 * Only accept a specific set of values
 *
 * | Parameter | Type            | Required | Description           |
 * | --------- | --------------- | -------- | --------------------- | ------------------- | ----------------------------------------- |
 * | `values`  | `Array<String>` | ✅       | Set of allowed values | </details><details> | <summary><code>extension</code></summary> |
 *
 * Only accept assets with specific file extensions.
 *
 * | Parameter         | Type                                                               | Required | Description                    |
 * | ----------------- | ------------------------------------------------------------------ | -------- | ------------------------------ |
 * | `extensions`      | `Array<String>`                                                    |          | Set of allowed file extensions |
 * | `predefined_list` | one of `"image"`, `"transformable_image"`, `"video"`, `"document"` |          | Allowed file type              |
 *
 * Only one of the parameters must be
 * specified.</details><details><summary><code>file_size</code></summary>
 *
 * Accept assets only inside a specified date range.
 *
 * | Parameter   | Type                         | Required | Description                        |
 * | ----------- | ---------------------------- | -------- | ---------------------------------- |
 * | `min_value` | `Integer`                    |          | Numeric value for minimum filesize |
 * | `min_unit`  | one of `"B"`, `"KB"`, `"MB"` |          | Unit for minimum filesize          |
 * | `max_value` | `Integer`                    |          | Numeric value for maximum filesize |
 * | `max_unit`  | one of `"B"`, `"KB"`, `"MB"` |          | Unit for maximum filesize          |
 *
 * At least one couple of value/unit must be
 * specified.</details><details><summary><code>format</code></summary>
 *
 * Only accept strings having a specific format.
 *
 * | Parameter            | Type                      | Required | Description                        |
 * | -------------------- | ------------------------- | -------- | ---------------------------------- |
 * | `custom_pattern`     | `Regexp`                  |          | Regular expression to be validated |
 * | `predefined_pattern` | one of `"email"`, `"url"` |          | Allowed format                     |
 *
 * Only one of the parameters must be
 * specified.</details><details><summary><code>slug_format</code></summary>
 *
 * Only accept slugs having a specific format.
 *
 * | Parameter            | Type             | Required | Description                        |
 * | -------------------- | ---------------- | -------- | ---------------------------------- |
 * | `custom_pattern`     | `Regexp`         |          | Regular expression to be validated |
 * | `predefined_pattern` | `"webpage_slug"` |          | Allowed format                     |
 *
 * Only one of the parameters must be
 * specified.</details><details><summary><code>image_dimensions</code></summary>
 *
 * Accept assets only within a specified height/width range.
 *
 * | Parameter          | Type      | Required | Description                      |
 * | ------------------ | --------- | -------- | -------------------------------- |
 * | `width_min_value`  | `Integer` |          | Numeric value for minimum width  |
 * | `width_max_value`  | `Integer` |          | Numeric value for maximum height |
 * | `height_min_value` | `Integer` |          | Numeric value for minimum width  |
 * | `height_max_value` | `Integer` |          | Numeric value for maximum height |
 *
 * At least one parameter must be
 * specified.</details><details><summary><code>item_item_type</code></summary>
 *
 * Only accept references to records of the specified models.
 *
 * | Parameter                                         | Type                                                                     | Required | Description                                                                                         |
 * | ------------------------------------------------- | ------------------------------------------------------------------------ | -------- | --------------------------------------------------------------------------------------------------- |
 * | `item_types`                                      | `Array<Model ID>`                                                        | ✅       | Set of allowed model IDs                                                                            |
 * | `on_publish_with_unpublished_references_strategy` | `"fail"`, `"publish_references"` (default value: `"fail"`)               |          | Strategy to apply when a publishing is requested and this field references some unpublished records |
 * | `on_reference_unpublish_strategy`                 | `"fail"`, `"unpublish"`, `"delete_references"` (default value: `"fail"`) |          | Strategy to apply when unpublishing is requested for a record referenced by this field              |
 * | `on_reference_delete_strategy`                    | `"fail"`, `"delete_references"` (default value: `"delete_references"`)   |          | Strategy to apply when deletion is requested for a record referenced by this field                  |
 *
 * Possible values for `on_publish_with_unpublished_references_strategy`:
 *
 * - `"fail"`: Fail the operation and notify the user
 * - `"publish_references"`: Publish also the referenced records
 *
 * Possible values for `on_reference_unpublish_strategy`:
 *
 * - `"fail"`: Fail the operation and notify the user
 * - `"unpublish"`: Unpublish also this record
 * - `"delete_references"`: Try to remove the reference to the unpublished record
 *   (if the field has a `required` validation it will fail)
 *
 * Possible values for `on_reference_delete_strategy`:
 *
 * - `"fail"`: Fail the operation and notify the user
 * - `"delete_references"`: Try to remove the reference to the deleted record (if
 *   the field has a `required` validation it will
 *   fail)</details><details><summary><code>items_item_type</code></summary>
 *
 * Only accept references to records of the specified models.
 *
 * | Parameter                                         | Type                                                                     | Required | Description                                                                                         |
 * | ------------------------------------------------- | ------------------------------------------------------------------------ | -------- | --------------------------------------------------------------------------------------------------- |
 * | `item_types`                                      | `Array<Model ID>`                                                        | ✅       | Set of allowed model IDs                                                                            |
 * | `on_publish_with_unpublished_references_strategy` | `"fail"`, `"publish_references"` (default value: `"fail"`)               |          | Strategy to apply when a publishing is requested and this field references some unpublished records |
 * | `on_reference_unpublish_strategy`                 | `"fail"`, `"unpublish"`, `"delete_references"` (default value: `"fail"`) |          | Strategy to apply when unpublishing is requested for a record referenced by this field              |
 * | `on_reference_delete_strategy`                    | `"fail"`, `"delete_references"` (default value: `"delete_references"`)   |          | Strategy to apply when deletion is requested for a record referenced by this field                  |
 *
 * Possible values for `on_publish_with_unpublished_references_strategy`:
 *
 * - `"fail"`: Fail the operation and notify the user
 * - `"publish_references"`: Publish also the referenced records
 *
 * Possible values for `on_reference_unpublish_strategy`:
 *
 * - `"fail"`: Fail the operation and notify the user
 * - `"unpublish"`: Unpublish also this record
 * - `"delete_references"`: Try to remove the reference to the unpublished record
 *   (if the field has a `required` validation it will fail)
 *
 * Possible values for `on_reference_delete_strategy`:
 *
 * - `"fail"`: Fail the operation and notify the user
 * - `"delete_references"`: Try to remove the reference to the deleted record (if
 *   the field has a `required` validation it will
 *   fail)</details><details><summary><code>length</code></summary>
 *
 * Accept strings only with a specified number of characters.
 *
 * | Parameter | Type      | Required | Description     |
 * | --------- | --------- | -------- | --------------- |
 * | `min`     | `Integer` |          | Minimum length  |
 * | `eq`      | `Integer` |          | Expected length |
 * | `max`     | `Integer` |          | Maximum length  |
 *
 * At least one parameter must be
 * specified.</details><details><summary><code>number_range</code></summary>
 *
 * Accept numbers only inside a specified range.
 *
 * | Parameter | Type    | Required | Description   |
 * | --------- | ------- | -------- | ------------- |
 * | `min`     | `Float` |          | Minimum value |
 * | `max`     | `Float` |          | Maximum value |
 *
 * At least one of the parameters must be
 * specified.</details><details><summary><code>required</code></summary>
 *
 * Value must be specified or it won't be
 * valid.</details><details><summary><code>required_alt_title</code></summary>
 *
 * Assets contained in the field are required to specify custom title or
 * alternate text, or they won't be valid.
 *
 * | Parameter | Type      | Required | Description                                                |
 * | --------- | --------- | -------- | ---------------------------------------------------------- |
 * | `title`   | `Boolean` |          | Whether the title for the asset must be specified          |
 * | `alt`     | `Boolean` |          | Whether the alternate text for the asset must be specified |
 *
 * At least one of the parameters must be
 * specified.</details><details><summary><code>required_seo_fields</code></summary>
 *
 * SEO field is to specify one or more properties, or it won't be valid.
 *
 * | Parameter      | Type      | Required | Description                                        |
 * | -------------- | --------- | -------- | -------------------------------------------------- |
 * | `title`        | `Boolean` |          | Whether the meta title must be specified           |
 * | `description`  | `Boolean` |          | Whether the meta description must be specified     |
 * | `image`        | `Boolean` |          | Whether the social sharing image must be specified |
 * | `twitter_card` | `Boolean` |          | Whether the type of Twitter card must be specified |
 *
 * At least one of the parameters must be
 * specified.</details><details><summary><code>title_length</code></summary>
 *
 * Limits the length of the title for a SEO field. Search engines usually
 * truncate title tags to 60 character so it is a good practice to keep the
 * title around this length.
 *
 * | Parameter | Type      | Required | Description   |
 * | --------- | --------- | -------- | ------------- |
 * | `min`     | `Integer` |          | Minimum value |
 * | `max`     | `Integer` |          | Maximum value |
 *
 * At least one of the parameters must be
 * specified.</details><details><summary><code>description_length</code></summary>
 *
 * Limits the length of the description for a SEO field. Search engines usually
 * truncate description tags to 160 character so it is a good practice to keep
 * the description around this length.
 *
 * | Parameter | Type      | Required | Description   |
 * | --------- | --------- | -------- | ------------- |
 * | `min`     | `Integer` |          | Minimum value |
 * | `max`     | `Integer` |          | Maximum value |
 *
 * At least one of the parameters must be
 * specified.</details><details><summary><code>rich_text_blocks</code></summary>
 *
 * Only accept references to block records of the specified block models.
 *
 * | Parameter    | Type                    | Required | Description                    |
 * | ------------ | ----------------------- | -------- | ------------------------------ | ------------------- | ------------------------------------------------------ |
 * | `item_types` | `Array<Block Model ID>` | ✅       | Set of allowed Block Model IDs | </details><details> | <summary><code>structured_text_blocks</code></summary> |
 *
 * Only accept references to block records of the specified block models.
 *
 * | Parameter    | Type                    | Required | Description                    |
 * | ------------ | ----------------------- | -------- | ------------------------------ | ------------------- | ----------------------------------------------------- |
 * | `item_types` | `Array<Block Model ID>` | ✅       | Set of allowed Block Model IDs | </details><details> | <summary><code>structured_text_links</code></summary> |
 *
 * Only accept `itemLink` to `inlineItem` nodes for records of the specified
 * models.
 *
 * | Parameter                                         | Type                                                                                  | Required | Description                                                                                         |
 * | ------------------------------------------------- | ------------------------------------------------------------------------------------- | -------- | --------------------------------------------------------------------------------------------------- |
 * | `item_types`                                      | `Array<Model ID>`                                                                     | ✅       | Set of allowed model IDs                                                                            |
 * | `on_publish_with_unpublished_references_strategy` | `"fail"`, `"publish_references"` (default value: `"fail"`)                            |          | Strategy to apply when a publishing is requested and this field references some unpublished records |
 * | `on_reference_unpublish_strategy`                 | `"fail"`, `"unpublish"`, `"delete_references"` (default value: `"delete_references"`) |          | Strategy to apply when unpublishing is requested for a record referenced by this field              |
 * | `on_reference_delete_strategy`                    | `"fail"`, `"delete_references"` (default value: `"delete_references"`)                |          | Strategy to apply when deletion is requested for a record referenced by this field                  |
 *
 * Possible values for `on_publish_with_unpublished_references_strategy`:
 *
 * - `"fail"`: Fail the operation and notify the user
 * - `"publish_references"`: Publish also the referenced records
 *
 * Possible values for `on_reference_unpublish_strategy`:
 *
 * - `"fail"`: Fail the operation and notify the user
 * - `"unpublish"`: Unpublish also this record
 * - `"delete_references"`: Try to remove the reference to the unpublished record
 *   (if the field has a `required` validation it will fail)
 *
 * Possible values for `on_reference_delete_strategy`:
 *
 * - `"fail"`: Fail the operation and notify the user
 * - `"delete_references"`: Try to remove the reference to the deleted record (if
 *   the field has a `required` validation it will
 *   fail)</details><details><summary><code>size</code></summary>
 *
 * Only accept a number of items within the specified range.
 *
 * | Parameter     | Type      | Required | Description                                        |
 * | ------------- | --------- | -------- | -------------------------------------------------- |
 * | `min`         | `Integer` |          | Minimum length                                     |
 * | `eq`          | `Integer` |          | Expected length                                    |
 * | `max`         | `Integer` |          | Maximum length                                     |
 * | `multiple_of` | `Integer` |          | The number of items must be multiple of this value |
 *
 * At least one parameter must be
 * specified.</details><details><summary><code>slug_title_field</code></summary>
 *
 * Specifies the ID of the _Single-line string_ field that will be used to
 * generate the slug
 *
 * | Parameter        | Type       | Required | Description                                      |
 * | ---------------- | ---------- | -------- | ------------------------------------------------ | ------------------- | -------------------------------------- |
 * | `title_field_id` | `Field ID` | ✅       | The field that will be used to generate the slug | </details><details> | <summary><code>unique</code></summary> |
 *
 * The value must be unique across the whole collection of records.</details>
 *
 * ### Configuration parameters for DatoCMS built-in field editors
 *
 * If a field editor is not specified in this table, just pass an empty object
 * `{}` as its configuration
 * parameters.<details><summary><code>boolean_radio_group</code></summary>
 *
 * Radio group input for _boolean_ fields.
 *
 * | Parameter        | Type                               | Required | Description                               |
 * | ---------------- | ---------------------------------- | -------- | ----------------------------------------- | ------------------- | -------------------------------------------------- |
 * | `positive_radio` | `{ label: string, hint?: string }` | ✅       | Radio input for positive choice (`true`)  |
 * | `negative_radio` | `{ label: string, hint?: string }` | ✅       | Radio input for negative choice (`false`) | </details><details> | <summary><code>string_radio_group</code></summary> |
 *
 * Radio group input for _string_ fields.
 *
 * | Parameter | Type                                                     | Required | Description                 |
 * | --------- | -------------------------------------------------------- | -------- | --------------------------- | ------------------- | --------------------------------------------- |
 * | `radios`  | `Array<{ label: string, value: string, hint?: string }>` | ✅       | The different radio options | </details><details> | <summary><code>string_select</code></summary> |
 *
 * Select input for _string_ fields.
 *
 * | Parameter | Type                                                     | Required | Description                  |
 * | --------- | -------------------------------------------------------- | -------- | ---------------------------- | ------------------- | --------------------------------------------------- |
 * | `options` | `Array<{ label: string, value: string, hint?: string }>` | ✅       | The different select options | </details><details> | <summary><code>string_multi_select</code></summary> |
 *
 * Select input for _JSON_ fields, to edit an array of strings.
 *
 * | Parameter | Type                                                     | Required | Description                  |
 * | --------- | -------------------------------------------------------- | -------- | ---------------------------- | ------------------- | ----------------------------------------------------- |
 * | `options` | `Array<{ label: string, value: string, hint?: string }>` | ✅       | The different select options | </details><details> | <summary><code>string_checkbox_group</code></summary> |
 *
 * Multiple chechboxes input for _JSON_ fields, to edit an array of strings.
 *
 * | Parameter | Type                                                     | Required | Description                  |
 * | --------- | -------------------------------------------------------- | -------- | ---------------------------- | ------------------- | ------------------------------------------- |
 * | `options` | `Array<{ label: string, value: string, hint?: string }>` | ✅       | The different select options | </details><details> | <summary><code>single_line</code></summary> |
 *
 * Simple textual input for _Single-line string_ fields.
 *
 * | Parameter | Type      | Required | Description                                                                      |
 * | --------- | --------- | -------- | -------------------------------------------------------------------------------- | ------------------- | ---------------------------------------- |
 * | `heading` | `Boolean` | ✅       | Indicates if the field should be shown bigger, as a field representing a heading | </details><details> | <summary><code>markdown</code></summary> |
 *
 * Markdown editor for _Multiple-paragraph text_ fields.
 *
 * | Parameter | Type            | Required | Description                                                                                                                                                                                                       |
 * | --------- | --------------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------- | --------------------------------------- |
 * | `toolbar` | `Array<String>` | ✅       | Specify which buttons the toolbar should have. Valid values: `"heading"`, `"bold"`, `"italic"`, `"strikethrough"`, `"code"`, `"unordered_list"`, `"ordered_list"`, `"quote"`, `"link"`, `"image"`, `"fullscreen"` | </details><details> | <summary><code>wysiwyg</code></summary> |
 *
 * HTML editor for _Multiple-paragraph text_ fields.
 *
 * | Parameter | Type            | Required | Description                                                                                                                                                                                                                                                                                                                                                     |
 * | --------- | --------------- | -------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------- | ---------------------------------------- |
 * | `toolbar` | `Array<String>` | ✅       | Specify which buttons the toolbar should have. Valid values: `"format"`, `"bold"`, `"italic"`, `"strikethrough"`, `"code"`, `"ordered_list"`, `"unordered_list"`, `"quote"`, `"table"`, `"link"`, `"image"`, `"show_source"`, `"undo"`, `"redo"`, `"align_left"`, `"align_center"`, `"align_right"`, `"align_justify"`, `"outdent"`, `"indent"`, `"fullscreen"` | </details><details> | <summary><code>textarea</code></summary> |
 *
 * Basic textarea editor for _Multiple-paragraph text_
 * fields.</details><details><summary><code>color_picker</code></summary>
 *
 * Built-in editor for _Color_ fields.
 *
 * | Parameter       | Type                      | Required | Description                                               |
 * | --------------- | ------------------------- | -------- | --------------------------------------------------------- | ------------------- | ------------------------------------ |
 * | `enable_alpha`  | `Boolean`                 | ✅       | Should the color picker allow to specify the alpha value? |
 * | `preset_colors` | `Array<Hex color string>` | ✅       | List of preset colors to offer to the user                | </details><details> | <summary><code>slug</code></summary> |
 *
 * Built-in editor for _Slug_ fields.
 *
 * | Parameter    | Type     | Required | Description                                                                            |
 * | ------------ | -------- | -------- | -------------------------------------------------------------------------------------- | ------------------- | ----------------------------------------- |
 * | `url_prefix` | `String` |          | A prefix that will be shown in the editor's form to give some context to your editors. | </details><details> | <summary><code>rich_text</code></summary> |
 *
 * Built-in editor for _Modular content_ fields.
 *
 * | Parameter         | Type      | Required | Description                                                |
 * | ----------------- | --------- | -------- | ---------------------------------------------------------- | ------------------- | ----------------------------------------------- |
 * | `start_collapsed` | `Boolean` |          | Whether you want block records collapsed by default or not | </details><details> | <summary><code>structured_text</code></summary> |
 *
 * Built-in editor for _Structured text_ fields.
 *
 * | Parameter                 | Type            | Required | Description                                                                                                                                   |
 * | ------------------------- | --------------- | -------- | --------------------------------------------------------------------------------------------------------------------------------------------- | ------------------- | ------------------------------------------------------------------------- |
 * | `nodes`                   | `Array<String>` | ✅       | Specify which nodes the field should allow. Valid values: `"blockquote"`, `"code"`, `"heading"`, `"link"`, `"list"`, `"thematicBreak"`        |
 * | `marks`                   | `Array<String>` | ✅       | Specify which marks the field should allow. Valid values: `"strong"`, `"emphasis"`, `"underline"`, `"strikethrough"`, `"code"`, `"highlight"` |
 * | `blocks_start_collapsed`  | `Boolean`       |          | Whether you want block nodes collapsed by default or not                                                                                      |
 * | `show_links_target_blank` | `Boolean`       |          | Whether you want to show the "Open this link in a new tab?" checkbox, that fills in the `target: "_blank"` meta attribute for links           |
 * | `show_links_meta_editor`  | `Boolean`       |          | Whether you want to show the complete meta editor for links                                                                                   | </details><details> | <summary><code>link_select</code> and <code>links_select</code></summary> |
 *
 * Use a select input with auto-completion to pick the records to reference
 * inside the field.</details><details><summary><code>link_embed</code> and
 * <code>links_embed</code></summary>
 *
 * Use an expanded view with records' image preview to pick the records to
 * reference inside the field.</details>
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "field".
 */
export interface Field {
  type: FieldType;
  id: FieldIdentity;
  attributes: FieldAttributes;
  relationships: FieldRelationships;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `Field`'s JSON-Schema via the `definition`
 * "attributes".
 */
export interface FieldAttributes {
  /** The label of the field */
  label: string;
  /** Type of input */
  field_type: string;
  /** Whether the field needs to be multilanguage or not */
  localized: boolean;
  /**
   * Default value for Field. When field is localized accepts an object of
   * default values with site locales as keys
   */
  default_value:
    | boolean
    | null
    | string
    | number
    | {
        [k: string]: unknown;
      };
  /** Field API key */
  api_key: string;
  /** Field hint */
  hint: string | null;
  /** Optional field validations */
  validators: {
    [k: string]: unknown;
  };
  /** Field appearance */
  appeareance: {
    editor: string;
    parameters: {
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  /** Field appearance details, plugin configuration and field add-ons */
  appearance: {
    /**
     * A valid editor can be a DatoCMS default field editor type (ie.
     * `"single_line"`), or a plugin ID offering a custom field editor
     */
    editor: string;
    /**
     * The specific field extension to use for the field (only if the editor is
     * a modern plugin)
     */
    field_extension?: string;
    /** The editor plugin's parameters */
    parameters: {
      [k: string]: unknown;
    };
    /** An array of add-on plugins with id and parameters */
    addons: {
      /** The ID of a plugin offering a field addon */
      id: string;
      /**
       * The specific field extension to use for the field (only if the editor
       * is a modern plugin)
       */
      field_extension?: string;
      parameters: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }[];
    [k: string]: unknown;
  };
  /** Ordering index */
  position: number;
}

/**
 * JSON API links
 *
 * This interface was referenced by `Field`'s JSON-Schema via the `definition`
 * "relationships".
 */
export interface FieldRelationships {
  /** Field item type */
  item_type: {
    data: ItemTypeData;
  };
  /** Fieldset linkage */
  fieldset: {
    data: null | FieldsetData;
  };
}

/**
 * This interface was referenced by `Field`'s JSON-Schema via the
 * `create.schema` link.
 */
export interface FieldCreateSchema {
  data: {
    type: FieldType;
    /** JSON API attributes */
    attributes: {
      /** The label of the field */
      label: string;
      /** Type of input */
      field_type: string;
      /** Field API key */
      api_key: string;
      /** Whether the field needs to be multilanguage or not */
      localized?: boolean;
      /** Optional field validations */
      validators?: {
        [k: string]: unknown;
      };
      /** Field appearance */
      appeareance?: {
        editor: string;
        parameters: {
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      /** Field appearance details, plugin configuration and field add-ons */
      appearance?: {
        /**
         * A valid editor can be a DatoCMS default field editor type (ie.
         * `"single_line"`), or a plugin ID offering a custom field editor
         */
        editor: string;
        /**
         * The specific field extension to use for the field (only if the editor
         * is a modern plugin)
         */
        field_extension?: string;
        /** The editor plugin's parameters */
        parameters: {
          [k: string]: unknown;
        };
        /** An array of add-on plugins with id and parameters */
        addons: {
          /** The ID of a plugin offering a field addon */
          id: string;
          /**
           * The specific field extension to use for the field (only if the
           * editor is a modern plugin)
           */
          field_extension?: string;
          parameters: {
            [k: string]: unknown;
          };
          [k: string]: unknown;
        }[];
        [k: string]: unknown;
      };
      /** Ordering index */
      position?: number;
      /** Field hint */
      hint?: string | null;
      /**
       * Default value for Field. When field is localized accepts an object of
       * default values with site locales as keys
       */
      default_value?:
        | boolean
        | null
        | string
        | number
        | {
            [k: string]: unknown;
          };
    };
    /** JSON API links */
    relationships?: {
      /** Fieldset linkage */
      fieldset: {
        data: null | FieldsetData;
      };
    };
  };
}

/**
 * This interface was referenced by `Field`'s JSON-Schema via the
 * `create.targetSchema` link.
 */
export interface FieldCreateTargetSchema {
  data: Job;
}

/**
 * This interface was referenced by `Field`'s JSON-Schema via the
 * `create.jobSchema` link.
 */
export interface FieldCreateJobSchema {
  data: Field;
  included?: ItemType[];
}

/**
 * This interface was referenced by `Field`'s JSON-Schema via the
 * `update.schema` link.
 */
export interface FieldUpdateSchema {
  data: {
    type: FieldType;
    id: FieldIdentity;
    attributes: {
      /**
       * Default value for Field. When field is localized accepts an object of
       * default values with site locales as keys
       */
      default_value?:
        | boolean
        | null
        | string
        | number
        | {
            [k: string]: unknown;
          };
      /** The label of the field */
      label?: string;
      /** Field API key */
      api_key?: string;
      /** Whether the field needs to be multilanguage or not */
      localized?: boolean;
      /** Optional field validations */
      validators?: {
        [k: string]: unknown;
      };
      /** Field appearance */
      appeareance?: {
        editor: string;
        parameters: {
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      /** Field appearance details, plugin configuration and field add-ons */
      appearance?: {
        /**
         * A valid editor can be a DatoCMS default field editor type (ie.
         * `"single_line"`), or a plugin ID offering a custom field editor
         */
        editor: string;
        /**
         * The specific field extension to use for the field (only if the editor
         * is a modern plugin)
         */
        field_extension?: string;
        /** The editor plugin's parameters */
        parameters: {
          [k: string]: unknown;
        };
        /** An array of add-on plugins with id and parameters */
        addons: {
          /** The ID of a plugin offering a field addon */
          id: string;
          /**
           * The specific field extension to use for the field (only if the
           * editor is a modern plugin)
           */
          field_extension?: string;
          parameters: {
            [k: string]: unknown;
          };
          [k: string]: unknown;
        }[];
        [k: string]: unknown;
      };
      /** Ordering index */
      position?: number;
      /** Type of input */
      field_type?: string;
      /** Field hint */
      hint?: string | null;
    };
    /** JSON API links */
    relationships?: {
      /** Fieldset linkage */
      fieldset: {
        data: null | FieldsetData;
      };
    };
  };
}

/**
 * This interface was referenced by `Field`'s JSON-Schema via the
 * `update.targetSchema` link.
 */
export interface FieldUpdateTargetSchema {
  data: Job;
}

/**
 * This interface was referenced by `Field`'s JSON-Schema via the
 * `update.jobSchema` link.
 */
export interface FieldUpdateJobSchema {
  data: Field;
  included?: (ItemType | Field)[];
}

/**
 * This interface was referenced by `Field`'s JSON-Schema via the
 * `instances.targetSchema` link.
 */
export interface FieldInstancesTargetSchema {
  data: Field[];
}

/**
 * This interface was referenced by `Field`'s JSON-Schema via the
 * `referencing.targetSchema` link.
 */
export interface FieldReferencingTargetSchema {
  data: Field[];
}

/**
 * This interface was referenced by `Field`'s JSON-Schema via the
 * `related.targetSchema` link.
 */
export interface FieldRelatedTargetSchema {
  data: Field[];
}

/**
 * This interface was referenced by `Field`'s JSON-Schema via the
 * `self.targetSchema` link.
 */
export interface FieldSelfTargetSchema {
  data: Field;
}

/**
 * This interface was referenced by `Field`'s JSON-Schema via the
 * `destroy.targetSchema` link.
 */
export interface FieldDestroyTargetSchema {
  data: Job;
}

/**
 * This interface was referenced by `Field`'s JSON-Schema via the
 * `destroy.jobSchema` link.
 */
export interface FieldDestroyJobSchema {
  data: Field;
  included?: ItemType[];
}

/**
 * This interface was referenced by `Field`'s JSON-Schema via the
 * `duplicate.targetSchema` link.
 */
export interface FieldDuplicateTargetSchema {
  data: Job;
}

/**
 * This interface was referenced by `Field`'s JSON-Schema via the
 * `duplicate.jobSchema` link.
 */
export interface FieldDuplicateJobSchema {
  data: Field;
  included: ItemType[];
}

/**
 * Fields can be organized and grouped into fieldset to better present them to
 * editors.
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "fieldset".
 */
export interface Fieldset {
  type: FieldsetType;
  id: FieldsetIdentity;
  attributes: FieldsetAttributes;
  relationships: FieldsetRelationships;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `Fieldset`'s JSON-Schema via the
 * `definition` "attributes".
 */
export interface FieldsetAttributes {
  /** The title of the fieldset */
  title: string;
  /** Description/contextual hint for the fieldset */
  hint: string | null;
  /** Whether the fieldset can be collapsed or not */
  collapsible: boolean;
  /**
   * When fieldset is collapsible, determines if the default is to start
   * collapsed or not
   */
  start_collapsed: boolean;
  /** Ordering index */
  position: number;
}

/**
 * JSON API links
 *
 * This interface was referenced by `Fieldset`'s JSON-Schema via the
 * `definition` "relationships".
 */
export interface FieldsetRelationships {
  /** Fieldset item type */
  item_type: {
    data: ItemTypeData;
  };
}

/**
 * This interface was referenced by `Fieldset`'s JSON-Schema via the
 * `create.schema` link.
 */
export interface FieldsetCreateSchema {
  data: {
    type: FieldsetType;
    /** JSON API attributes */
    attributes: {
      /** The title of the fieldset */
      title: string;
      /** Description/contextual hint for the fieldset */
      hint?: string | null;
      /** Ordering index */
      position?: number;
      /** Whether the fieldset can be collapsed or not */
      collapsible?: boolean;
      /**
       * When fieldset is collapsible, determines if the default is to start
       * collapsed or not
       */
      start_collapsed?: boolean;
    };
  };
}

/**
 * This interface was referenced by `Fieldset`'s JSON-Schema via the
 * `create.targetSchema` link.
 */
export interface FieldsetCreateTargetSchema {
  data: Fieldset;
}

/**
 * This interface was referenced by `Fieldset`'s JSON-Schema via the
 * `update.schema` link.
 */
export interface FieldsetUpdateSchema {
  data: {
    type: FieldsetType;
    id: FieldsetIdentity;
    attributes: {
      /** The title of the fieldset */
      title?: string;
      /** Description/contextual hint for the fieldset */
      hint?: string | null;
      /** Ordering index */
      position?: number;
      /** Whether the fieldset can be collapsed or not */
      collapsible?: boolean;
      /**
       * When fieldset is collapsible, determines if the default is to start
       * collapsed or not
       */
      start_collapsed?: boolean;
    };
  };
}

/**
 * This interface was referenced by `Fieldset`'s JSON-Schema via the
 * `update.targetSchema` link.
 */
export interface FieldsetUpdateTargetSchema {
  data: Fieldset;
}

/**
 * This interface was referenced by `Fieldset`'s JSON-Schema via the
 * `instances.targetSchema` link.
 */
export interface FieldsetInstancesTargetSchema {
  data: Fieldset[];
}

/**
 * This interface was referenced by `Fieldset`'s JSON-Schema via the
 * `self.targetSchema` link.
 */
export interface FieldsetSelfTargetSchema {
  data: Fieldset;
}

/**
 * This interface was referenced by `Fieldset`'s JSON-Schema via the
 * `destroy.targetSchema` link.
 */
export interface FieldsetDestroyTargetSchema {
  data: Fieldset;
}

/**
 * A session is required to access to read-and-write API endpoints
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "session".
 */
export interface Session {
  type: SessionType;
  id: SessionIdentity;
  relationships: SessionRelationships;
}

/**
 * JSON API links
 *
 * This interface was referenced by `Session`'s JSON-Schema via the `definition`
 * "relationships".
 */
export interface SessionRelationships {
  /** The user associated with the session */
  user: {
    data: UserData;
  };
}

/**
 * JSON API data
 *
 * This interface was referenced by `Session`'s JSON-Schema via the `definition`
 * "data".
 */
export interface SessionData {
  type: SessionType;
  id: SessionIdentity;
}

/**
 * This interface was referenced by `Session`'s JSON-Schema via the
 * `create.schema` link.
 */
export interface SessionCreateSchema {
  data: {
    /** JSON API type field */
    type: 'email_credentials';
    /** JSON API attributes */
    attributes: {
      /** Email */
      email: string;
      /** Password */
      password: string;
      /** Two-factor authentication one-time password */
      otp_code?: string;
    };
  };
}

/**
 * This interface was referenced by `Session`'s JSON-Schema via the
 * `create.targetSchema` link.
 */
export interface SessionCreateTargetSchema {
  data: Session;
  included: User[];
}

/**
 * Plugins enable developers to replace DatoCMS field components with HTML5
 * applications so the editing experiences of the DatoCMS web app can be
 * customized.
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "plugin".
 */
export interface Plugin {
  type: PluginType;
  id: PluginIdentity;
  attributes: PluginAttributes;
  meta: PluginMeta;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `Plugin`'s JSON-Schema via the `definition`
 * "attributes".
 */
export interface PluginAttributes {
  /** The name of the plugin */
  name: string;
  /** A description of the plugin */
  description: null | string;
  /** NPM package name of the plugin (or null if it's a private plugin) */
  package_name: null | string;
  /** The installed version of the plugin (or null if it's a private plugin) */
  package_version: null | string;
  /** The entry point URL of the plugin */
  url: string;
  /**
   * Global plugin configuration. Plugins can persist whatever information they
   * want in this object to reuse it later.
   */
  parameters: {
    [k: string]: unknown;
  };
  /** Permissions granted to this plugin */
  permissions: 'currentUserAccessToken'[];
  /** The type of field extension a legacy plugin implements */
  plugin_type: 'field_editor' | 'sidebar' | 'field_addon' | null;
  /** On which types of field in which a legacy plugin can be used */
  field_types:
    | null
    | (
        | 'boolean'
        | 'date'
        | 'date_time'
        | 'float'
        | 'integer'
        | 'string'
        | 'text'
        | 'lat_lon'
        | 'json'
        | 'seo'
        | 'link'
        | 'links'
        | 'video'
        | 'color'
        | 'slug'
        | 'rich_text'
        | 'file'
        | 'gallery'
      )[];
  /** The schema for the parameters a legacy plugin can persist */
  parameter_definitions: null | {
    global: unknown[];
    instance: unknown[];
  };
}

/**
 * JSON API meta
 *
 * This interface was referenced by `Plugin`'s JSON-Schema via the `definition`
 * "meta".
 */
export interface PluginMeta {
  /** Version of the plugin. Legacy plugins are v1, new plugins are v2 */
  version: string;
}

/**
 * JSON API data
 *
 * This interface was referenced by `Plugin`'s JSON-Schema via the `definition`
 * "data".
 */
export interface PluginData {
  type: PluginType;
  id: PluginIdentity;
}

/**
 * This interface was referenced by `Plugin`'s JSON-Schema via the
 * `create.schema` link.
 */
export interface PluginCreateSchema {
  data: {
    type: PluginType;
    attributes: {
      /**
       * NPM package name of the public plugin you want to install. For public
       * plugins, that's the only attribute you need to pass.
       */
      package_name?: null | string;
      /**
       * The name of the plugin. Only to be passed if package name key is not
       * specified.
       */
      name?: string;
      /**
       * A description of the plugin. Only to be passed if package name key is
       * not specified.
       */
      description?: null | string;
      /**
       * The entry point URL of the plugin. Only to be passed if package name
       * key is not specified.
       */
      url?: string;
      /**
       * Permissions granted to this plugin. Only to be passed if package name
       * key is not specified.
       */
      permissions?: 'currentUserAccessToken'[];
      /**
       * The type of field extension this legacy plugin implements. Only to be
       * passed if package name key is not specified.
       */
      plugin_type?: 'field_editor' | 'sidebar' | 'field_addon';
      /**
       * On which types of field in which this legacy plugin can be used. Only
       * to be passed if package name key is not specified.
       */
      field_types?: (
        | 'boolean'
        | 'date'
        | 'date_time'
        | 'float'
        | 'integer'
        | 'string'
        | 'text'
        | 'lat_lon'
        | 'json'
        | 'seo'
        | 'link'
        | 'links'
        | 'video'
        | 'color'
        | 'slug'
        | 'rich_text'
        | 'file'
        | 'gallery'
      )[];
      /** The schema for the parameters this legacy plugin can persist */
      parameter_definitions?: {
        global: unknown[];
        instance: unknown[];
      };
      /** NPM version of the plugin */
      package_version?: null | string;
    };
  };
}

/**
 * This interface was referenced by `Plugin`'s JSON-Schema via the
 * `create.targetSchema` link.
 */
export interface PluginCreateTargetSchema {
  data: Plugin;
}

/**
 * This interface was referenced by `Plugin`'s JSON-Schema via the
 * `update.schema` link.
 */
export interface PluginUpdateSchema {
  data: {
    type: PluginType;
    id: PluginIdentity;
    attributes: {
      /** The name of the plugin */
      name?: string;
      /** A description of the plugin */
      description?: null | string;
      /** The entry point URL of the plugin */
      url?: string;
      /**
       * Global plugin configuration. Plugins can persist whatever information
       * they want in this object to reuse it later.
       */
      parameters?: {
        [k: string]: unknown;
      };
      /** The installed version of the plugin (or null if it's a private plugin) */
      package_version?: null | string;
      /** Permissions granted to this plugin */
      permissions?: 'currentUserAccessToken'[];
    };
    meta?: {
      [k: string]: unknown;
    };
  };
}

/**
 * This interface was referenced by `Plugin`'s JSON-Schema via the
 * `update.targetSchema` link.
 */
export interface PluginUpdateTargetSchema {
  data: Plugin;
}

/**
 * This interface was referenced by `Plugin`'s JSON-Schema via the
 * `instances.targetSchema` link.
 */
export interface PluginInstancesTargetSchema {
  data: Plugin[];
}

/**
 * This interface was referenced by `Plugin`'s JSON-Schema via the
 * `self.targetSchema` link.
 */
export interface PluginSelfTargetSchema {
  data: Plugin;
}

/**
 * This interface was referenced by `Plugin`'s JSON-Schema via the
 * `destroy.targetSchema` link.
 */
export interface PluginDestroyTargetSchema {
  data: Plugin;
}

/**
 * This interface was referenced by `Plugin`'s JSON-Schema via the
 * `fields.targetSchema` link.
 */
export interface PluginFieldsTargetSchema {
  data: Field[];
}

/**
 * Some API endpoint give results asynchronously, returning the ID of a job.
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "job_result".
 */
export interface JobResult {
  type: JobResultType;
  id: JobResultIdentity;
  attributes: JobResultAttributes;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `JobResult`'s JSON-Schema via the
 * `definition` "attributes".
 */
export interface JobResultAttributes {
  /** Status of delayed HTTP response */
  status: number;
  /** JSON API response of the HTTP request */
  payload: null | {
    [k: string]: unknown;
  };
}

/**
 * JSON API data
 *
 * This interface was referenced by `JobResult`'s JSON-Schema via the
 * `definition` "data".
 */
export interface JobResultData {
  type: JobResultType;
  id: JobResultIdentity;
}

/**
 * This interface was referenced by `JobResult`'s JSON-Schema via the
 * `self.targetSchema` link.
 */
export interface JobResultSelfTargetSchema {
  data: JobResult;
}

/**
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "subscription_limit".
 */
export interface SubscriptionLimit {
  type: SubscriptionLimitType;
  id: SubscriptionLimitIdentity;
  attributes: SubscriptionLimitAttributes;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `SubscriptionLimit`'s JSON-Schema via the
 * `definition` "attributes".
 */
export interface SubscriptionLimitAttributes {
  /** The codename for the limit */
  code: string;
  /** Current usage */
  usage: number;
  /** The actual limit */
  limit: number | null;
}

/**
 * JSON API data
 *
 * This interface was referenced by `SubscriptionLimit`'s JSON-Schema via the
 * `definition` "data".
 */
export interface SubscriptionLimitData {
  type: SubscriptionLimitType;
  id: SubscriptionLimitIdentity;
}

/**
 * This interface was referenced by `SubscriptionLimit`'s JSON-Schema via the
 * `instances.targetSchema` link.
 */
export interface SubscriptionLimitInstancesTargetSchema {
  data: SubscriptionLimit[];
}

/**
 * This interface was referenced by `SubscriptionLimit`'s JSON-Schema via the
 * `self.targetSchema` link.
 */
export interface SubscriptionLimitSelfTargetSchema {
  data: SubscriptionLimit;
}

/**
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "subscription_feature".
 */
export interface SubscriptionFeature {
  type: SubscriptionFeatureType;
  id: SubscriptionFeatureIdentity;
  attributes: SubscriptionFeatureAttributes;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `SubscriptionFeature`'s JSON-Schema via the
 * `definition` "attributes".
 */
export interface SubscriptionFeatureAttributes {
  /** The codename for the feature */
  code: string;
  /** Whether the project is currently using the feature */
  in_use?: boolean;
  /** Whether the feature is available on the current project */
  enabled: boolean;
}

/**
 * JSON API data
 *
 * This interface was referenced by `SubscriptionFeature`'s JSON-Schema via the
 * `definition` "data".
 */
export interface SubscriptionFeatureData {
  type: SubscriptionFeatureType;
  id: SubscriptionFeatureIdentity;
}

/**
 * This interface was referenced by `SubscriptionFeature`'s JSON-Schema via the
 * `instances.targetSchema` link.
 */
export interface SubscriptionFeatureInstancesTargetSchema {
  data: SubscriptionFeature[];
}

/**
 * Represents an event occurred during the deploy process of your administrative
 * area.
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "build_event".
 */
export interface BuildEvent {
  type: BuildEventType;
  id: BuildEventIdentity;
  attributes: BuildEventAttributes;
  relationships: BuildEventRelationships;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `BuildEvent`'s JSON-Schema via the
 * `definition` "attributes".
 */
export interface BuildEventAttributes {
  /** The type of activity */
  event_type:
    | 'request_success'
    | 'request_failure'
    | 'response_success'
    | 'response_failure'
    | 'request_aborted'
    | 'response_unprocessable'
    | 'indexing_started'
    | 'indexing_success'
    | 'indexing_failure';
  /** The moment the activity occurred */
  created_at: string;
  /** Any details regarding the event */
  data: {
    [k: string]: unknown;
  };
}

/**
 * JSON API links
 *
 * This interface was referenced by `BuildEvent`'s JSON-Schema via the
 * `definition` "relationships".
 */
export interface BuildEventRelationships {
  /** Source build trigger */
  build_trigger: {
    data: BuildTriggerData;
  };
}

/**
 * JSON API data
 *
 * This interface was referenced by `BuildTrigger`'s JSON-Schema via the
 * `definition` "data".
 */
export interface BuildTriggerData {
  type: BuildTriggerType;
  id: BuildTriggerIdentity;
}

/**
 * JSON API data
 *
 * This interface was referenced by `BuildEvent`'s JSON-Schema via the
 * `definition` "data".
 */
export interface BuildEventData {
  type: BuildEventType;
  id: BuildEventIdentity;
}

/**
 * This interface was referenced by `BuildEvent`'s JSON-Schema via the
 * `instances.targetSchema` link.
 */
export interface BuildEventInstancesTargetSchema {
  data: BuildEvent[];
}

/**
 * This interface was referenced by `BuildEvent`'s JSON-Schema via the
 * `self.targetSchema` link.
 */
export interface BuildEventSelfTargetSchema {
  data: BuildEvent;
}

/**
 * DatoCMS stores the individual pieces of content you create from a model as
 * records, which are much like table rows in a database. For
 * backward-compatibility reasons, the API refers to records as "items".
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "item".
 */
export interface Item {
  type: ItemType1;
  id: ItemIdentity;
  attributes: ItemAttributes;
  relationships: ItemRelationships;
  meta: ItemMeta;
}

/**
 * The JSON data associated to the record
 *
 * This interface was referenced by `Item`'s JSON-Schema via the `definition`
 * "attributes".
 */
export interface ItemAttributes {
  [k: string]: unknown;
}

/**
 * JSON API links
 *
 * This interface was referenced by `Item`'s JSON-Schema via the `definition`
 * "relationships".
 */
export interface ItemRelationships {
  /** The record's model */
  item_type: {
    data: ItemTypeData;
  };
  /**
   * The entity (account/collaborator/access token/sso user) who created the
   * record. It must be an object with `type` (e.g. 'account') and `id`
   * properties.
   */
  creator?: {
    data: AccountData | AccessTokenData | UserData | SsoUserData;
  };
}

/**
 * Meta information regarding the record
 *
 * This interface was referenced by `Item`'s JSON-Schema via the `definition`
 * "meta".
 */
export interface ItemMeta {
  /** Date of creation */
  created_at: string;
  /** Last update time */
  updated_at: string;
  /** Date of last publication */
  published_at: null | string;
  /** Date of first publication */
  first_published_at: null | string;
  /** Date of future publication */
  publication_scheduled_at: null | string;
  /** Date of future unpublishing */
  unpublishing_scheduled_at: null | string;
  /** Status */
  status: null | ('draft' | 'updated' | 'published');
  /** Whether the current record is valid or not */
  is_valid: boolean;
  /** The ID of the current record version */
  current_version: string;
  /** Workflow stage in which the item is */
  stage: null | string;
}

/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `instances.targetSchema` link.
 */
export interface ItemInstancesTargetSchema {
  data: Item[];
  meta: {
    total_count: number;
  };
}

/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `validate_existing.schema` link.
 */
export interface ItemValidateExistingSchema {
  data: {
    id: ItemIdentity;
    type: ItemType1;
    /** The JSON data associated to the record */
    attributes: {
      [k: string]: unknown;
    };
    relationships: {
      /** The record's model */
      item_type: {
        data: ItemTypeData;
      };
      /**
       * The entity (account/collaborator/access token/sso user) who created the
       * record. It must be an object with `type` (e.g. 'account') and `id`
       * properties.
       */
      creator?: {
        data: AccountData | AccessTokenData | UserData | SsoUserData;
      };
    };
  };
}

/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `validate_new.schema` link.
 */
export interface ItemValidateNewSchema {
  data: {
    type: ItemType1;
    /** The JSON data associated to the record */
    attributes: {
      [k: string]: unknown;
    };
    relationships: {
      /** The record's model */
      item_type: {
        data: ItemTypeData;
      };
    };
  };
}

/**
 * This interface was referenced by `Item`'s JSON-Schema via the `create.schema`
 * link.
 */
export interface ItemCreateSchema {
  data: {
    type: ItemType1;
    /** The JSON data associated to the record */
    attributes: {
      [k: string]: unknown;
    };
    /** Meta information regarding the record */
    meta?: {
      /** Date of creation */
      created_at?: string;
      /** Last update time */
      updated_at?: string;
      /** Date of last publication */
      published_at?: null | string;
      /** Date of first publication */
      first_published_at?: null | string;
      /** Date of future publication */
      publication_scheduled_at?: null | string;
      /** Status */
      status?: null | ('draft' | 'updated' | 'published');
      /** Whether the current record is valid or not */
      is_valid?: boolean;
      /** The ID of the current record version */
      current_version?: string;
    };
    relationships: {
      /** The record's model */
      item_type: {
        data: ItemTypeData;
      };
    };
  };
}

/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `create.targetSchema` link.
 */
export interface ItemCreateTargetSchema {
  data: Item;
  included: (ItemType | Item)[];
}

/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `duplicate.targetSchema` link.
 */
export interface ItemDuplicateTargetSchema {
  data: Job;
}

/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `duplicate.jobSchema` link.
 */
export interface ItemDuplicateJobSchema {
  data: Item;
  included: ItemType[];
}

/**
 * This interface was referenced by `Item`'s JSON-Schema via the `update.schema`
 * link.
 */
export interface ItemUpdateSchema {
  data: {
    type: ItemType1;
    id: ItemIdentity;
    /** The JSON data associated to the record */
    attributes?: {
      [k: string]: unknown;
    };
    /** Meta information regarding the record */
    meta?: {
      /** Date of creation */
      created_at?: string;
      /** Last update time */
      updated_at?: string;
      /** Date of last publication */
      published_at?: null | string;
      /** Date of first publication */
      first_published_at?: null | string;
      /** Date of future publication */
      publication_scheduled_at?: null | string;
      /** Date of future unpublishing */
      unpublishing_scheduled_at?: null | string;
      /** Status */
      status?: null | ('draft' | 'updated' | 'published');
      /** Whether the current record is valid or not */
      is_valid?: boolean;
      /**
       * The ID of the current record version (for optimistic locking, see the
       * example)
       */
      current_version?: string;
      /** The new stage to move the record to */
      stage?: string | null;
    };
    relationships?: {
      /** The record's model */
      item_type?: {
        data: ItemTypeData;
      };
      /**
       * The entity (account/collaborator/access token/sso user) who created the
       * record. It must be an object with `type` (e.g. 'account') and `id`
       * properties.
       */
      creator?: {
        data: AccountData | AccessTokenData | UserData | SsoUserData;
      };
    };
  };
}

/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `update.targetSchema` link.
 */
export interface ItemUpdateTargetSchema {
  data: Item;
  included?: (ItemType | Item)[];
}

/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `references.targetSchema` link.
 */
export interface ItemReferencesTargetSchema {
  data: Item[];
}

/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `self.targetSchema` link.
 */
export interface ItemSelfTargetSchema {
  data: Item;
}

/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `destroy.targetSchema` link.
 */
export interface ItemDestroyTargetSchema {
  data: Job;
}

/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `destroy.jobSchema` link.
 */
export interface ItemDestroyJobSchema {
  data: Item;
}

/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `batch_destroy.targetSchema` link.
 */
export interface ItemBatchDestroyTargetSchema {
  data: Job;
}

/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `batch_destroy.jobSchema` link.
 */
export interface ItemBatchDestroyJobSchema {
  data: unknown[];
  meta: {
    successful: number;
    failed: number;
  };
}

/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `batch_publish.targetSchema` link.
 */
export interface ItemBatchPublishTargetSchema {
  data: Job;
}

/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `batch_publish.jobSchema` link.
 */
export interface ItemBatchPublishJobSchema {
  data: unknown[];
  meta: {
    successful: number;
    failed: number;
  };
}

/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `batch_unpublish.targetSchema` link.
 */
export interface ItemBatchUnpublishTargetSchema {
  data: Job;
}

/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `batch_unpublish.jobSchema` link.
 */
export interface ItemBatchUnpublishJobSchema {
  data: unknown[];
  meta: {
    successful: number;
    failed: number;
  };
}

/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `publish.targetSchema` link.
 */
export interface ItemPublishTargetSchema {
  data: Item;
  included?: ItemType[];
}

/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `unpublish.targetSchema` link.
 */
export interface ItemUnpublishTargetSchema {
  data: Item;
  included?: ItemType[];
}

/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `bulk_publish.schema` link.
 */
export interface ItemBulkPublishSchema {
  data: {
    /** JSON API type field */
    type: 'item_bulk_publish_operation';
    relationships: {
      /** Records to publish */
      items: {
        data: ItemData[];
      };
      minItems?: unknown;
    };
  };
}

/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `bulk_publish.targetSchema` link.
 */
export interface ItemBulkPublishTargetSchema {
  data: Job;
}

/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `bulk_publish.jobSchema` link.
 */
export interface ItemBulkPublishJobSchema {
  data: unknown[];
  meta: {
    successful: number;
    failed: number;
  };
}

/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `bulk_unpublish.schema` link.
 */
export interface ItemBulkUnpublishSchema {
  data: {
    /** JSON API type field */
    type: 'item_bulk_unpublish_operation';
    relationships: {
      /** Records to unpublish */
      items: {
        data: ItemData[];
      };
      minItems?: unknown;
    };
  };
}

/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `bulk_unpublish.targetSchema` link.
 */
export interface ItemBulkUnpublishTargetSchema {
  data: Job;
}

/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `bulk_unpublish.jobSchema` link.
 */
export interface ItemBulkUnpublishJobSchema {
  data: unknown[];
  meta: {
    successful: number;
    failed: number;
  };
}

/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `bulk_destroy.schema` link.
 */
export interface ItemBulkDestroySchema {
  data: {
    /** JSON API type field */
    type: 'item_bulk_destroy_operation';
    relationships: {
      /** Records to delete */
      items: {
        data: ItemData[];
      };
      minItems?: unknown;
    };
  };
}

/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `bulk_destroy.targetSchema` link.
 */
export interface ItemBulkDestroyTargetSchema {
  data: Job;
}

/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `bulk_destroy.jobSchema` link.
 */
export interface ItemBulkDestroyJobSchema {
  data: unknown[];
  meta: {
    successful: number;
    failed: number;
  };
}

/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `bulk_move_to_stage.schema` link.
 */
export interface ItemBulkMoveToStageSchema {
  data: {
    /** JSON API type field */
    type: 'item_bulk_move_to_stage_operation';
    attributes: {
      /** Stage to be moved to */
      stage: string;
    };
    relationships: {
      /** Records to move */
      items: {
        data: ItemData[];
      };
      minItems?: unknown;
    };
  };
}

/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `bulk_move_to_stage.targetSchema` link.
 */
export interface ItemBulkMoveToStageTargetSchema {
  data: Job;
}

/**
 * This interface was referenced by `Item`'s JSON-Schema via the
 * `bulk_move_to_stage.jobSchema` link.
 */
export interface ItemBulkMoveToStageJobSchema {
  data: unknown[];
  meta: {
    successful: number;
    failed: number;
  };
}

/**
 * Every change to a record is stored as a separate record version in DatoCMS.
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "item_version".
 */
export interface ItemVersion {
  type: ItemVersionType;
  id: ItemVersionIdentity;
  attributes: ItemVersionAttributes;
  relationships: ItemVersionRelationships;
  meta: ItemVersionMeta;
}

/**
 * The JSON data associated to the record version
 *
 * This interface was referenced by `ItemVersion`'s JSON-Schema via the
 * `definition` "attributes".
 */
export interface ItemVersionAttributes {
  [k: string]: unknown;
}

/**
 * JSON API links
 *
 * This interface was referenced by `ItemVersion`'s JSON-Schema via the
 * `definition` "relationships".
 */
export interface ItemVersionRelationships {
  /** The record version's model */
  item_type: {
    data: ItemTypeData;
  };
  /** The record this version belongs to */
  item: {
    data: ItemData;
  };
  /**
   * The entity (account/collaborator/access token/sso user) who made this
   * change to the record. It must be an object with `type` (e.g. 'account') and
   * `id` properties.
   */
  editor: {
    data: AccountData | AccessTokenData | UserData | SsoUserData;
  };
}

/**
 * Meta information regarding the record version
 *
 * This interface was referenced by `ItemVersion`'s JSON-Schema via the
 * `definition` "meta".
 */
export interface ItemVersionMeta {
  /** Date of record version creation */
  created_at: string;
  /** Whether the record version is valid or not */
  is_valid: boolean;
  /** Whether the record version is the published version or not */
  is_published: boolean;
  /** Whether the record version is the most recent version or not */
  is_current: boolean;
}

/**
 * JSON API data
 *
 * This interface was referenced by `ItemVersion`'s JSON-Schema via the
 * `definition` "data".
 */
export interface ItemVersionData {
  type: ItemVersionType;
  id: ItemVersionIdentity;
}

/**
 * This interface was referenced by `ItemVersion`'s JSON-Schema via the
 * `restore.targetSchema` link.
 */
export interface ItemVersionRestoreTargetSchema {
  data: Job;
}

/**
 * This interface was referenced by `ItemVersion`'s JSON-Schema via the
 * `restore.jobSchema` link.
 */
export interface ItemVersionRestoreJobSchema {
  data: [Item, ItemVersion];
}

/**
 * This interface was referenced by `ItemVersion`'s JSON-Schema via the
 * `instances.targetSchema` link.
 */
export interface ItemVersionInstancesTargetSchema {
  data: ItemVersion[];
  meta: {
    total_count: number;
  };
}

/**
 * This interface was referenced by `ItemVersion`'s JSON-Schema via the
 * `self.targetSchema` link.
 */
export interface ItemVersionSelfTargetSchema {
  data: ItemVersion;
}

/**
 * Every file you upload to DatoCMS will be retrievable from this endpoint.
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "upload".
 */
export interface Upload {
  type: UploadType;
  id: UploadIdentity;
  attributes: UploadAttributes;
  relationships: UploadRelationships;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `Upload`'s JSON-Schema via the `definition`
 * "attributes".
 */
export interface UploadAttributes {
  /** Size of the upload */
  size: number;
  /** Width of image */
  width: null | number;
  /** Height of image */
  height: null | number;
  /** Upload path */
  path: string;
  /** Upload basename */
  basename: string;
  /** Upload filename */
  filename: string;
  /** Upload URL */
  url: string;
  /** Format */
  format: string | null;
  /** Author */
  author: string | null;
  /** Copyright */
  copyright: string | null;
  /** Notes */
  notes: string | null;
  /** The MD5 hash of the asset */
  md5: string;
  /** Seconds of duration for the video */
  duration: number | null;
  /** Frame rate (FPS) for the video */
  frame_rate: number | null;
  /** Blurhash for the asset */
  blurhash: string | null;
  /**
   * Public Mux playback ID. Used with stream.mux.com to create the source URL
   * for a video player.
   */
  mux_playback_id: string | null;
  /** Maximum quality of MP4 rendition available */
  mux_mp4_highest_res: null | 'high' | 'medium' | 'low';
  /**
   * For each of the project's locales, the default metadata to apply if nothing
   * is specified at record's level.
   */
  default_field_metadata: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition via
     * the `patternProperty`
     * "^(?<languagecode>[a-z]{0,3}(-[A-Za-z]+)?(-[A-Z]{0,3})?)$".
     */
    [k: string]: {
      /** Alternate text for the asset */
      alt: string | null;
      /** Title for the asset */
      title: string | null;
      /** Object with arbitrary metadata */
      custom_data: {
        [k: string]: unknown;
      };
      /** Focal point (only for image assets) */
      focal_point: {
        /** Horizontal position expressed as float between 0 and 1 */
        x: number;
        /** Vertical position expressed as float between 0 and 1 */
        y: number;
      } | null;
    };
  };
  /** Is this upload an image? */
  is_image: boolean;
  /** Date of upload */
  created_at: null | string;
  /** Date of last update */
  updated_at: null | string;
  /** Mime type of upload */
  mime_type: null | string;
  /** Tags */
  tags: string[];
  /** Smart tags */
  smart_tags: string[];
  /** Exif information */
  exif_info: {
    [k: string]: unknown;
  };
  /** Dominant colors of the image */
  colors: {
    /** Red value (from 0 to 255) */
    red: number;
    /** Green value (from 0 to 255) */
    green: number;
    /** Blue value (from 0 to 255) */
    blue: number;
    /** Alpha value (from 0 to 255) */
    alpha: number;
  }[];
}

/**
 * JSON API links
 *
 * This interface was referenced by `Upload`'s JSON-Schema via the `definition`
 * "relationships".
 */
export interface UploadRelationships {
  /**
   * The entity (account/collaborator/access token) who created the asset. It
   * must be an object with `type` (e.g. 'account') and `id` properties.
   */
  creator: {
    data: AccountData | AccessTokenData | UserData | SsoUserData;
  };
}

/**
 * JSON API data
 *
 * This interface was referenced by `Upload`'s JSON-Schema via the `definition`
 * "data".
 */
export interface UploadData {
  type: UploadType;
  id: UploadIdentity;
}

/**
 * This interface was referenced by `Upload`'s JSON-Schema via the
 * `create.schema` link.
 */
export interface UploadCreateSchema {
  data: {
    type: UploadType;
    attributes: {
      /** Upload path */
      path: string;
      /** Copyright */
      copyright?: string | null;
      /** Author */
      author?: string | null;
      /** Notes */
      notes?: string | null;
      /**
       * For each of the project's locales, the default metadata to apply if
       * nothing is specified at record's level.
       */
      default_field_metadata?: {
        /**
         * This interface was referenced by `undefined`'s JSON-Schema definition
         * via the `patternProperty`
         * "^(?<languagecode>[a-z]{0,3}(-[A-Za-z]+)?(-[A-Z]{0,3})?)$".
         */
        [k: string]: {
          /** Alternate text for the asset */
          alt?: string | null;
          /** Title for the asset */
          title?: string | null;
          /** Object with arbitrary metadata */
          custom_data?: {
            [k: string]: unknown;
          };
          /** Focal point (only for image assets) */
          focal_point?: {
            /** Horizontal position expressed as float between 0 and 1 */
            x: number;
            /** Vertical position expressed as float between 0 and 1 */
            y: number;
          } | null;
        };
      };
      /** Tags */
      tags?: string[];
      [k: string]: unknown;
    };
  };
}

/**
 * This interface was referenced by `Upload`'s JSON-Schema via the
 * `create.targetSchema` link.
 */
export interface UploadCreateTargetSchema {
  data: Job;
}

/**
 * This interface was referenced by `Upload`'s JSON-Schema via the
 * `create.jobSchema` link.
 */
export interface UploadCreateJobSchema {
  data: Upload;
}

/**
 * This interface was referenced by `Upload`'s JSON-Schema via the
 * `instances.targetSchema` link.
 */
export interface UploadInstancesTargetSchema {
  data: Upload[];
  meta: {
    total_count: number;
  };
}

/**
 * This interface was referenced by `Upload`'s JSON-Schema via the
 * `self.targetSchema` link.
 */
export interface UploadSelfTargetSchema {
  data: Upload;
}

/**
 * This interface was referenced by `Upload`'s JSON-Schema via the
 * `destroy.targetSchema` link.
 */
export interface UploadDestroyTargetSchema {
  data: Upload;
}

/**
 * This interface was referenced by `Upload`'s JSON-Schema via the
 * `update.schema` link.
 */
export interface UploadUpdateSchema {
  data: {
    type: UploadType;
    id: UploadIdentity;
    attributes?: {
      /** Upload path */
      path?: string;
      /** Upload basename */
      basename?: string;
      /** Copyright */
      copyright?: string | null;
      /** Author */
      author?: string | null;
      /** Notes */
      notes?: string | null;
      /** Tags */
      tags?: string[];
      /**
       * For each of the project's locales, the default metadata to apply if
       * nothing is specified at record's level.
       */
      default_field_metadata?: {
        /**
         * This interface was referenced by `undefined`'s JSON-Schema definition
         * via the `patternProperty`
         * "^(?<languagecode>[a-z]{0,3}(-[A-Za-z]+)?(-[A-Z]{0,3})?)$".
         */
        [k: string]: {
          /** Alternate text for the asset */
          alt?: string | null;
          /** Title for the asset */
          title?: string | null;
          /** Object with arbitrary metadata */
          custom_data?: {
            [k: string]: unknown;
          };
          /** Focal point (only for image assets) */
          focal_point?: {
            /** Horizontal position expressed as float between 0 and 1 */
            x: number;
            /** Vertical position expressed as float between 0 and 1 */
            y: number;
          } | null;
        };
      };
      [k: string]: unknown;
    };
    relationships?: {
      /**
       * The entity (account/collaborator/access token) who created the asset.
       * It must be an object with `type` (e.g. 'account') and `id` properties.
       */
      creator: {
        data: AccountData | AccessTokenData | UserData | SsoUserData;
      };
    };
  };
}

/**
 * This interface was referenced by `Upload`'s JSON-Schema via the
 * `update.targetSchema` link.
 */
export interface UploadUpdateTargetSchema {
  data: Job;
}

/**
 * This interface was referenced by `Upload`'s JSON-Schema via the
 * `update.jobSchema` link.
 */
export interface UploadUpdateJobSchema {
  data: Upload;
}

/**
 * This interface was referenced by `Upload`'s JSON-Schema via the
 * `batch_add_tags.schema` link.
 */
export interface UploadBatchAddTagsSchema {
  data: {
    type: UploadType;
    attributes: {
      /** Tags */
      tags?: string[];
    };
  };
}

/**
 * This interface was referenced by `Upload`'s JSON-Schema via the
 * `batch_add_tags.targetSchema` link.
 */
export interface UploadBatchAddTagsTargetSchema {
  data: Job;
}

/**
 * This interface was referenced by `Upload`'s JSON-Schema via the
 * `batch_add_tags.jobSchema` link.
 */
export interface UploadBatchAddTagsJobSchema {
  data: unknown[];
  meta: {
    successful: number;
    failed: number;
  };
}

/**
 * This interface was referenced by `Upload`'s JSON-Schema via the
 * `batch_destroy.targetSchema` link.
 */
export interface UploadBatchDestroyTargetSchema {
  data: Job;
}

/**
 * This interface was referenced by `Upload`'s JSON-Schema via the
 * `batch_destroy.jobSchema` link.
 */
export interface UploadBatchDestroyJobSchema {
  data: unknown[];
  meta: {
    successful: number;
    failed: number;
  };
}

/**
 * This interface was referenced by `Upload`'s JSON-Schema via the
 * `references.targetSchema` link.
 */
export interface UploadReferencesTargetSchema {
  data: Item[];
}

/**
 * This interface was referenced by `Upload`'s JSON-Schema via the
 * `bulk_tag.schema` link.
 */
export interface UploadBulkTagSchema {
  data: {
    /** JSON API type field */
    type: 'upload_bulk_tag_operation';
    /** JSON API attributes */
    attributes: {
      /** The tags to add to the assets */
      tags: string[];
    };
    relationships: {
      /** Assets to tag */
      uploads: {
        data: UploadData[];
      };
    };
  };
}

/**
 * This interface was referenced by `Upload`'s JSON-Schema via the
 * `bulk_tag.targetSchema` link.
 */
export interface UploadBulkTagTargetSchema {
  data: Job;
}

/**
 * This interface was referenced by `Upload`'s JSON-Schema via the
 * `bulk_tag.jobSchema` link.
 */
export interface UploadBulkTagJobSchema {
  data: unknown[];
  meta: {
    successful: number;
    failed: number;
  };
}

/**
 * This interface was referenced by `Upload`'s JSON-Schema via the
 * `bulk_destroy.schema` link.
 */
export interface UploadBulkDestroySchema {
  data: {
    /** JSON API type field */
    type: 'upload_bulk_destroy_operation';
    relationships: {
      /** Assets to delete */
      uploads: {
        data: UploadData[];
      };
    };
  };
}

/**
 * This interface was referenced by `Upload`'s JSON-Schema via the
 * `bulk_destroy.targetSchema` link.
 */
export interface UploadBulkDestroyTargetSchema {
  data: Job;
}

/**
 * This interface was referenced by `Upload`'s JSON-Schema via the
 * `bulk_destroy.jobSchema` link.
 */
export interface UploadBulkDestroyJobSchema {
  data: unknown[];
  meta: {
    successful: number;
    failed: number;
  };
}

/**
 * To upload a file in DatoCMS, first you need to obtain an upload permission
 * through this API endpoint. The response will contain the S3 URL where you
 * will be able to upload the file with a direct PUT request.
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "upload_request".
 */
export interface UploadRequest {
  type: UploadRequestType;
  id: UploadRequestIdentity;
  attributes: UploadRequestAttributes;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `UploadRequest`'s JSON-Schema via the
 * `definition` "attributes".
 */
export interface UploadRequestAttributes {
  /** The URL to use to upload the file with a direct PUT request */
  url: string;
  [k: string]: unknown;
}

/**
 * This interface was referenced by `UploadRequest`'s JSON-Schema via the
 * `create.schema` link.
 */
export interface UploadRequestCreateSchema {
  data: {
    type: UploadRequestType;
    /** JSON API attributes */
    attributes: {
      /** The original file name */
      filename?: string;
      [k: string]: unknown;
    };
  };
}

/**
 * This interface was referenced by `UploadRequest`'s JSON-Schema via the
 * `create.targetSchema` link.
 */
export interface UploadRequestCreateTargetSchema {
  data: UploadRequest;
}

/**
 * You can create scheduled publication to publish records in the future
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "scheduled_publication".
 */
export interface ScheduledPublication {
  type: ScheduledPublicationType;
  id: ScheduledPublicationIdentity;
  attributes: ScheduledPublicationAttributes;
  relationships: ScheduledPublicationRelationships;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `ScheduledPublication`'s JSON-Schema via the
 * `definition` "attributes".
 */
export interface ScheduledPublicationAttributes {
  /** The future date for the publication */
  publication_scheduled_at: string;
}

/**
 * JSON API links
 *
 * This interface was referenced by `ScheduledPublication`'s JSON-Schema via the
 * `definition` "relationships".
 */
export interface ScheduledPublicationRelationships {
  /** Item */
  item: {
    data: ItemData;
  };
}

/**
 * JSON API data
 *
 * This interface was referenced by `ScheduledPublication`'s JSON-Schema via the
 * `definition` "data".
 */
export interface ScheduledPublicationData {
  type: ScheduledPublicationType;
  id: ScheduledPublicationIdentity;
}

/**
 * This interface was referenced by `ScheduledPublication`'s JSON-Schema via the
 * `create.schema` link.
 */
export interface ScheduledPublicationCreateSchema {
  data: {
    type: ScheduledPublicationType;
    attributes: ScheduledPublicationAttributes;
  };
}

/**
 * This interface was referenced by `ScheduledPublication`'s JSON-Schema via the
 * `create.targetSchema` link.
 */
export interface ScheduledPublicationCreateTargetSchema {
  data: ScheduledPublication;
  included: Item[];
}

/**
 * This interface was referenced by `ScheduledPublication`'s JSON-Schema via the
 * `destroy.targetSchema` link.
 */
export interface ScheduledPublicationDestroyTargetSchema {
  data: Item;
}

/**
 * You can create a scheduled unpublishing to unpublish records in the future
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "scheduled_unpublishing".
 */
export interface ScheduledUnpublishing {
  type: ScheduledUnpublishingType;
  id: ScheduledUnpublishingIdentity;
  attributes: ScheduledUnpublishingAttributes;
  relationships: ScheduledUnpublishingRelationships;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `ScheduledUnpublishing`'s JSON-Schema via
 * the `definition` "attributes".
 */
export interface ScheduledUnpublishingAttributes {
  /** The future date for the unpublishing */
  unpublishing_scheduled_at: string;
}

/**
 * JSON API links
 *
 * This interface was referenced by `ScheduledUnpublishing`'s JSON-Schema via
 * the `definition` "relationships".
 */
export interface ScheduledUnpublishingRelationships {
  /** Item */
  item: {
    data: ItemData;
  };
}

/**
 * JSON API data
 *
 * This interface was referenced by `ScheduledUnpublishing`'s JSON-Schema via
 * the `definition` "data".
 */
export interface ScheduledUnpublishingData {
  type: ScheduledUnpublishingType;
  id: ScheduledUnpublishingIdentity;
}

/**
 * This interface was referenced by `ScheduledUnpublishing`'s JSON-Schema via
 * the `create.schema` link.
 */
export interface ScheduledUnpublishingCreateSchema {
  data: {
    type: ScheduledUnpublishingType;
    attributes: ScheduledUnpublishingAttributes;
  };
}

/**
 * This interface was referenced by `ScheduledUnpublishing`'s JSON-Schema via
 * the `create.targetSchema` link.
 */
export interface ScheduledUnpublishingCreateTargetSchema {
  data: ScheduledUnpublishing;
  included: Item[];
}

/**
 * This interface was referenced by `ScheduledUnpublishing`'s JSON-Schema via
 * the `destroy.targetSchema` link.
 */
export interface ScheduledUnpublishingDestroyTargetSchema {
  data: Item;
}

/**
 * DatoCMS Site Search is a way to deliver tailored search results to your site
 * visitors. This is the endpoint you can use to query for results.
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "search_result".
 */
export interface SearchResult {
  type: SearchResultType;
  id: SearchResultIdentity;
  attributes: SearchResultAttributes;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `SearchResult`'s JSON-Schema via the
 * `definition` "attributes".
 */
export interface SearchResultAttributes {
  /** Page title */
  title: string;
  /** First lines of body */
  body_excerpt: string;
  /** URL */
  url: string;
  /** Score */
  score: number;
  highlight: {
    title?: string[] | null;
    body?: string[] | null;
  };
}

/**
 * JSON API data
 *
 * This interface was referenced by `SearchResult`'s JSON-Schema via the
 * `definition` "data".
 */
export interface SearchResultData {
  type: SearchResultType;
  id: SearchResultIdentity;
}

/**
 * This interface was referenced by `SearchResult`'s JSON-Schema via the
 * `instances.targetSchema` link.
 */
export interface SearchResultInstancesTargetSchema {
  data: SearchResult[];
  meta?: {
    total_count: number;
  };
}

/**
 * [Environments](https://www.datocms.com/docs/general-concepts/primary-and-sandbox-environments)
 * make it easier for your development team to **manage and maintain content
 * structure once your content has been published**. You can think of
 * environments like code branches: great for testing, development and
 * pre-production environments.
 *
 * By default, every project has one environment, called **primary
 * environment**, which is meant to be used for the regular editorial workflow.
 * Additionally, multiple **sandbox environments** can be created by developers
 * to safely test/experiment new changes in the content.
 *
 * Sandbox environments start out as **exact copies of one of the existing
 * environments** (ie. the primary one). The process of creating a new sandbox
 * starting off from an existing environment is called fork.
 *
 * Each environment is identified by a name (ie. `master`) and stores the
 * following information:
 *
 * - Models
 * - Records
 * - Uploads
 * - Plugins
 * - Locales and timezone settings
 * - UI Theme (colors and logo)
 * - Global SEO settings
 * - The content navigation bar
 *
 * When making changes to any of the aforementioned entities in any environment,
 * including the primary environment, **the data in all other environments isn’t
 * affected** and stays the same.
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "environment".
 */
export interface Environment {
  type: EnvironmentType;
  id: EnvironmentIdentity;
  meta: EnvironmentMeta;
}

/**
 * Meta attributes
 *
 * This interface was referenced by `Environment`'s JSON-Schema via the
 * `definition` "meta".
 */
export interface EnvironmentMeta {
  /** Status of the environment */
  status: 'creating' | 'ready' | 'destroying';
  /** Date of creation */
  created_at: string;
  /** Last data change */
  last_data_change_at: string;
  /** Is this environment the primary for the project? */
  primary: boolean;
  /** ID of the environment that's been forked to generate this one */
  forked_from?: string | null;
}

/**
 * JSON API data
 *
 * This interface was referenced by `Environment`'s JSON-Schema via the
 * `definition` "data".
 */
export interface EnvironmentData {
  type: EnvironmentType;
  id: EnvironmentIdentity;
}

/**
 * This interface was referenced by `Environment`'s JSON-Schema via the
 * `fork.schema` link.
 */
export interface EnvironmentForkSchema {
  data: {
    type: EnvironmentType;
    /** The ID of the forked environment */
    id: string;
  };
}

/**
 * This interface was referenced by `Environment`'s JSON-Schema via the
 * `fork.targetSchema` link.
 */
export interface EnvironmentForkTargetSchema {
  data: Job | Environment;
}

/**
 * This interface was referenced by `Environment`'s JSON-Schema via the
 * `fork.jobSchema` link.
 */
export interface EnvironmentForkJobSchema {
  data: Environment;
}

/**
 * This interface was referenced by `Environment`'s JSON-Schema via the
 * `promote.targetSchema` link.
 */
export interface EnvironmentPromoteTargetSchema {
  data: Environment;
}

/**
 * This interface was referenced by `Environment`'s JSON-Schema via the
 * `instances.targetSchema` link.
 */
export interface EnvironmentInstancesTargetSchema {
  data: Environment[];
}

/**
 * This interface was referenced by `Environment`'s JSON-Schema via the
 * `self.targetSchema` link.
 */
export interface EnvironmentSelfTargetSchema {
  data: Environment;
}

/**
 * This interface was referenced by `Environment`'s JSON-Schema via the
 * `destroy.targetSchema` link.
 */
export interface EnvironmentDestroyTargetSchema {
  data: Job | Environment;
}

/**
 * This interface was referenced by `Environment`'s JSON-Schema via the
 * `destroy.jobSchema` link.
 */
export interface EnvironmentDestroyJobSchema {
  data: Environment;
}

/**
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "maintenance_mode".
 */
export interface MaintenanceMode {
  type: MaintenanceModeType;
  id: MaintenanceModeIdentity;
  attributes: MaintenanceModeAttributes;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `MaintenanceMode`'s JSON-Schema via the
 * `definition` "attributes".
 */
export interface MaintenanceModeAttributes {
  /** Whether maintenance mode is currently active or not */
  active: boolean;
}

/**
 * JSON API data
 *
 * This interface was referenced by `MaintenanceMode`'s JSON-Schema via the
 * `definition` "data".
 */
export interface MaintenanceModeData {
  type: MaintenanceModeType;
  id: MaintenanceModeIdentity;
}

/**
 * This interface was referenced by `MaintenanceMode`'s JSON-Schema via the
 * `self.targetSchema` link.
 */
export interface MaintenanceModeSelfTargetSchema {
  data: MaintenanceMode;
}

/**
 * This interface was referenced by `MaintenanceMode`'s JSON-Schema via the
 * `activate.targetSchema` link.
 */
export interface MaintenanceModeActivateTargetSchema {
  data: MaintenanceMode;
}

/**
 * This interface was referenced by `MaintenanceMode`'s JSON-Schema via the
 * `deactivate.targetSchema` link.
 */
export interface MaintenanceModeDeactivateTargetSchema {
  data: MaintenanceMode;
}

/**
 * A webhook allows to make requests following certain Dato events. It is linked
 * to a Role, which describes what actions can be performed.
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "webhook".
 */
export interface Webhook {
  type: WebhookType;
  id: WebhookIdentity;
  attributes: WebhookAttributes;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `Webhook`'s JSON-Schema via the `definition`
 * "attributes".
 */
export interface WebhookAttributes {
  /** Unique name for the webhook */
  name: string;
  /** Whether the webhook is enabled and sending events or not */
  enabled: boolean;
  /** The URL to be called */
  url: string;
  /** A custom payload */
  custom_payload: string | null;
  /** HTTP Basic Authorization username */
  http_basic_user: string | null;
  /** HTTP Basic Authorization password */
  http_basic_password: string | null;
  /** Additional headers that will be sent */
  headers: {
    [k: string]: unknown;
  };
  /** All the events you will be notified for */
  events: unknown[];
  /**
   * Specifies which API version to use when serializing entities in the webhook
   * payload
   */
  payload_api_version: string;
  /**
   * Whether the you want records present in the payload to show blocks expanded
   * or not
   */
  nested_items_in_payload: boolean;
}

/**
 * JSON API data
 *
 * This interface was referenced by `Webhook`'s JSON-Schema via the `definition`
 * "data".
 */
export interface WebhookData {
  type: WebhookType;
  id: WebhookIdentity;
}

/**
 * This interface was referenced by `Webhook`'s JSON-Schema via the
 * `create.schema` link.
 */
export interface WebhookCreateSchema {
  data: {
    type: WebhookType;
    attributes: {
      /** Unique name for the webhook */
      name: string;
      /** The URL to be called */
      url: string;
      /** A custom payload */
      custom_payload: string | null;
      /** Additional headers that will be sent */
      headers: {
        [k: string]: unknown;
      };
      /** All the events you will be notified for */
      events: unknown[];
      /** HTTP Basic Authorization username */
      http_basic_user: string | null;
      /** HTTP Basic Authorization password */
      http_basic_password: string | null;
      /** Whether the webhook is enabled and sending events or not */
      enabled?: boolean;
      /**
       * Specifies which API version to use when serializing entities in the
       * webhook payload
       */
      payload_api_version?: string;
      /**
       * Whether the you want records present in the payload to show blocks
       * expanded or not
       */
      nested_items_in_payload?: boolean;
    };
  };
}

/**
 * This interface was referenced by `Webhook`'s JSON-Schema via the
 * `create.targetSchema` link.
 */
export interface WebhookCreateTargetSchema {
  data: Webhook;
}

/**
 * This interface was referenced by `Webhook`'s JSON-Schema via the
 * `update.schema` link.
 */
export interface WebhookUpdateSchema {
  data: {
    type: WebhookType;
    id: WebhookIdentity;
    attributes: {
      /** Unique name for the webhook */
      name?: string;
      /** The URL to be called */
      url?: string;
      /** A custom payload */
      custom_payload?: string | null;
      /** Additional headers that will be sent */
      headers?: {
        [k: string]: unknown;
      };
      /** All the events you will be notified for */
      events?: unknown[];
      /** HTTP Basic Authorization username */
      http_basic_user?: string | null;
      /** HTTP Basic Authorization password */
      http_basic_password?: string | null;
      /** Whether the webhook is enabled and sending events or not */
      enabled?: boolean;
      /**
       * Specifies which API version to use when serializing entities in the
       * webhook payload
       */
      payload_api_version?: string;
      /**
       * Whether the you want records present in the payload to show blocks
       * expanded or not
       */
      nested_items_in_payload?: boolean;
    };
  };
}

/**
 * This interface was referenced by `Webhook`'s JSON-Schema via the
 * `update.targetSchema` link.
 */
export interface WebhookUpdateTargetSchema {
  data: Webhook;
}

/**
 * This interface was referenced by `Webhook`'s JSON-Schema via the
 * `instances.targetSchema` link.
 */
export interface WebhookInstancesTargetSchema {
  data: Webhook[];
}

/**
 * This interface was referenced by `Webhook`'s JSON-Schema via the
 * `self.targetSchema` link.
 */
export interface WebhookSelfTargetSchema {
  data: Webhook;
}

/**
 * This interface was referenced by `Webhook`'s JSON-Schema via the
 * `destroy.targetSchema` link.
 */
export interface WebhookDestroyTargetSchema {
  data: Webhook;
}

/**
 * Represents a log entry in the webhooks activity list.
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "webhook_call".
 */
export interface WebhookCall {
  type: WebhookCallType;
  id: WebhookCallIdentity;
  attributes: WebhookCallAttributes;
  relationships: WebhookCallRelationships;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `WebhookCall`'s JSON-Schema via the
 * `definition` "attributes".
 */
export interface WebhookCallAttributes {
  /** The subject of webhook triggering */
  entity_type: 'item' | 'item_type' | 'upload';
  /** The event that triggers the webhook call */
  event_type: 'create' | 'update' | 'delete' | 'publish' | 'unpublish';
  /** The moment the call occurred */
  created_at: string;
  /** The url that the webhook called */
  request_url: string;
  /** The request's headers */
  request_headers: {
    [k: string]: unknown;
  };
  /** The body of the request */
  request_payload: string;
  /** The status of the response */
  response_status: number | null;
  /** The response's headers */
  response_headers: {
    [k: string]: unknown;
  };
  /** The body of the response */
  response_payload: string | null;
}

/**
 * JSON API links
 *
 * This interface was referenced by `WebhookCall`'s JSON-Schema via the
 * `definition` "relationships".
 */
export interface WebhookCallRelationships {
  /** The webhook which has been called */
  webhook: {
    data: WebhookData;
  };
}

/**
 * JSON API data
 *
 * This interface was referenced by `WebhookCall`'s JSON-Schema via the
 * `definition` "data".
 */
export interface WebhookCallData {
  type: WebhookCallType;
  id: WebhookCallIdentity;
}

/**
 * This interface was referenced by `WebhookCall`'s JSON-Schema via the
 * `instances.targetSchema` link.
 */
export interface WebhookCallInstancesTargetSchema {
  data: WebhookCall[];
  meta: {
    total_count: number;
  };
}

/**
 * Configuration for different build triggers. You can have different staging
 * and production environments in order to test your site before final deploy
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "build_trigger".
 */
export interface BuildTrigger {
  type: BuildTriggerType;
  id: BuildTriggerIdentity;
  attributes: BuildTriggerAttributes;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `BuildTrigger`'s JSON-Schema via the
 * `definition` "attributes".
 */
export interface BuildTriggerAttributes {
  /** Name of the environment */
  name: string;
  /** The deploy adapter */
  adapter: string;
  /** Additional configuration for deploy */
  adapter_settings: {
    [k: string]: unknown;
  };
  /** Timestamp of the last deploy */
  last_build_completed_at: string | null;
  /** Status of last deploy */
  build_status: string;
  /** Unique token of the webhook */
  webhook_token?: string;
  /** Notification webhook URL */
  webhook_url: string;
  /** Status of site scraper */
  indexing_status: string;
  /** Public url of the site */
  frontend_url: string | null;
  /** Deploy on scheduled publication */
  autotrigger_on_scheduled_publications: boolean;
  /** Enable scraper on the site */
  indexing_enabled: boolean;
}

/**
 * This interface was referenced by `BuildTrigger`'s JSON-Schema via the
 * `instances.targetSchema` link.
 */
export interface BuildTriggerInstancesTargetSchema {
  data: BuildTrigger[];
}

/**
 * This interface was referenced by `BuildTrigger`'s JSON-Schema via the
 * `self.targetSchema` link.
 */
export interface BuildTriggerSelfTargetSchema {
  data: BuildTrigger;
}

/**
 * This interface was referenced by `BuildTrigger`'s JSON-Schema via the
 * `create.schema` link.
 */
export interface BuildTriggerCreateSchema {
  data: {
    type: BuildTriggerType;
    attributes: {
      /** Name of the environment */
      name: string;
      /** Unique token of the webhook */
      webhook_token?: string;
      /** The deploy adapter */
      adapter: string;
      /** Enable scraper on the site */
      indexing_enabled: boolean;
      /** Public url of the site */
      frontend_url: string | null;
      /** Deploy on scheduled publication */
      autotrigger_on_scheduled_publications: boolean;
      /** Additional configuration for deploy */
      adapter_settings: {
        [k: string]: unknown;
      };
    };
  };
}

/**
 * This interface was referenced by `BuildTrigger`'s JSON-Schema via the
 * `create.targetSchema` link.
 */
export interface BuildTriggerCreateTargetSchema {
  data: BuildTrigger;
}

/**
 * This interface was referenced by `BuildTrigger`'s JSON-Schema via the
 * `update.schema` link.
 */
export interface BuildTriggerUpdateSchema {
  data: {
    type: BuildTriggerType;
    id: BuildTriggerIdentity;
    attributes: {
      /** Name of the environment */
      name?: string;
      /** The deploy adapter */
      adapter?: string;
      /** Enable scraper on the site */
      indexing_enabled?: boolean;
      /** Public url of the site */
      frontend_url?: string | null;
      /** Deploy on scheduled publication */
      autotrigger_on_scheduled_publications?: boolean;
      /** Additional configuration for deploy */
      adapter_settings?: {
        [k: string]: unknown;
      };
    };
  };
}

/**
 * This interface was referenced by `BuildTrigger`'s JSON-Schema via the
 * `update.targetSchema` link.
 */
export interface BuildTriggerUpdateTargetSchema {
  data: BuildTrigger;
}

/**
 * This interface was referenced by `BuildTrigger`'s JSON-Schema via the
 * `destroy.targetSchema` link.
 */
export interface BuildTriggerDestroyTargetSchema {
  data: BuildTrigger;
}

/**
 * In DatoCMS you can create filters to help you (and other editors) quickly
 * search for records
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "item_type_filter".
 */
export interface ItemTypeFilter {
  type: ItemTypeFilterType;
  id: ItemTypeFilterIdentity;
  attributes: ItemTypeFilterAttributes;
  relationships: ItemTypeFilterRelationships;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `ItemTypeFilter`'s JSON-Schema via the
 * `definition` "attributes".
 */
export interface ItemTypeFilterAttributes {
  /** The name of the filter */
  name: string;
  /** The actual filter */
  filter: {
    [k: string]: unknown;
  };
  /** Whether it's a shared filter or not */
  shared: boolean;
}

/**
 * JSON API links
 *
 * This interface was referenced by `ItemTypeFilter`'s JSON-Schema via the
 * `definition` "relationships".
 */
export interface ItemTypeFilterRelationships {
  /** Model associated with the filter */
  item_type: {
    data: ItemTypeData;
  };
}

/**
 * JSON API data
 *
 * This interface was referenced by `ItemTypeFilter`'s JSON-Schema via the
 * `definition` "data".
 */
export interface ItemTypeFilterData {
  type: ItemTypeFilterType;
  id: ItemTypeFilterIdentity;
}

/**
 * This interface was referenced by `ItemTypeFilter`'s JSON-Schema via the
 * `create.schema` link.
 */
export interface ItemTypeFilterCreateSchema {
  data: {
    type: ItemTypeFilterType;
    attributes: {
      /** The name of the filter */
      name: string;
      /** The actual filter */
      filter: {
        [k: string]: unknown;
      };
      /** Whether it's a shared filter or not */
      shared: boolean;
    };
    relationships: {
      /** Model associated with the filter */
      item_type: {
        data: ItemTypeData;
      };
    };
  };
}

/**
 * This interface was referenced by `ItemTypeFilter`'s JSON-Schema via the
 * `create.targetSchema` link.
 */
export interface ItemTypeFilterCreateTargetSchema {
  data: ItemTypeFilter;
}

/**
 * This interface was referenced by `ItemTypeFilter`'s JSON-Schema via the
 * `update.schema` link.
 */
export interface ItemTypeFilterUpdateSchema {
  data: {
    type: ItemTypeFilterType;
    id: ItemTypeFilterIdentity;
    /** JSON API attributes */
    attributes: {
      /** The name of the filter */
      name: string;
      /** Whether it's a shared filter or not */
      shared?: boolean;
      /** The actual filter */
      filter: {
        [k: string]: unknown;
      };
    };
  };
}

/**
 * This interface was referenced by `ItemTypeFilter`'s JSON-Schema via the
 * `update.targetSchema` link.
 */
export interface ItemTypeFilterUpdateTargetSchema {
  data: ItemTypeFilter;
}

/**
 * This interface was referenced by `ItemTypeFilter`'s JSON-Schema via the
 * `instances.targetSchema` link.
 */
export interface ItemTypeFilterInstancesTargetSchema {
  data: ItemTypeFilter[];
}

/**
 * This interface was referenced by `ItemTypeFilter`'s JSON-Schema via the
 * `self.targetSchema` link.
 */
export interface ItemTypeFilterSelfTargetSchema {
  data: ItemTypeFilter;
}

/**
 * This interface was referenced by `ItemTypeFilter`'s JSON-Schema via the
 * `destroy.targetSchema` link.
 */
export interface ItemTypeFilterDestroyTargetSchema {
  data: ItemTypeFilter;
}

/**
 * In DatoCMS you can create filters to help you (and other editors) quickly
 * search for uploads
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "upload_filter".
 */
export interface UploadFilter {
  type: UploadFilterType;
  id: UploadFilterIdentity;
  attributes: UploadFilterAttributes;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `UploadFilter`'s JSON-Schema via the
 * `definition` "attributes".
 */
export interface UploadFilterAttributes {
  /** The name of the filter */
  name: string;
  /** The actual filter */
  filter: {
    [k: string]: unknown;
  };
  /** Whether it's a shared filter or not */
  shared: boolean;
}

/**
 * JSON API data
 *
 * This interface was referenced by `UploadFilter`'s JSON-Schema via the
 * `definition` "data".
 */
export interface UploadFilterData {
  type: UploadFilterType;
  id: UploadFilterIdentity;
}

/**
 * This interface was referenced by `UploadFilter`'s JSON-Schema via the
 * `create.schema` link.
 */
export interface UploadFilterCreateSchema {
  data: {
    type: UploadFilterType;
    /** JSON API attributes */
    attributes: {
      /** The name of the filter */
      name: string;
      /** The actual filter */
      filter: {
        [k: string]: unknown;
      };
      /** Whether it's a shared filter or not */
      shared: boolean;
    };
  };
}

/**
 * This interface was referenced by `UploadFilter`'s JSON-Schema via the
 * `create.targetSchema` link.
 */
export interface UploadFilterCreateTargetSchema {
  data: UploadFilter;
}

/**
 * This interface was referenced by `UploadFilter`'s JSON-Schema via the
 * `update.schema` link.
 */
export interface UploadFilterUpdateSchema {
  data: {
    type: UploadFilterType;
    id: UploadFilterIdentity;
    /** JSON API attributes */
    attributes: {
      /** The name of the filter */
      name: string;
      /** Whether it's a shared filter or not */
      shared?: boolean;
      /** The actual filter */
      filter: {
        [k: string]: unknown;
      };
    };
  };
}

/**
 * This interface was referenced by `UploadFilter`'s JSON-Schema via the
 * `update.targetSchema` link.
 */
export interface UploadFilterUpdateTargetSchema {
  data: UploadFilter;
}

/**
 * This interface was referenced by `UploadFilter`'s JSON-Schema via the
 * `instances.targetSchema` link.
 */
export interface UploadFilterInstancesTargetSchema {
  data: UploadFilter[];
}

/**
 * This interface was referenced by `UploadFilter`'s JSON-Schema via the
 * `self.targetSchema` link.
 */
export interface UploadFilterSelfTargetSchema {
  data: UploadFilter;
}

/**
 * This interface was referenced by `UploadFilter`'s JSON-Schema via the
 * `destroy.targetSchema` link.
 */
export interface UploadFilterDestroyTargetSchema {
  data: UploadFilter;
}

/**
 * A DatoCMS administrative area can be accessed by multiple people. Every
 * invitation is linked to a specific Role, which describes what actions it will
 * be able to perform once the user will register.
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "site_invitation".
 */
export interface SiteInvitation {
  type: SiteInvitationType;
  id: SiteInvitationIdentity;
  attributes: SiteInvitationAttributes;
  relationships: SiteInvitationRelationships;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `SiteInvitation`'s JSON-Schema via the
 * `definition` "attributes".
 */
export interface SiteInvitationAttributes {
  /** Email */
  email: string;
}

/**
 * JSON API links
 *
 * This interface was referenced by `SiteInvitation`'s JSON-Schema via the
 * `definition` "relationships".
 */
export interface SiteInvitationRelationships {
  /** Role */
  role: {
    data: RoleData;
  };
}

/**
 * JSON API data
 *
 * This interface was referenced by `SiteInvitation`'s JSON-Schema via the
 * `definition` "data".
 */
export interface SiteInvitationData {
  type: SiteInvitationType;
  id: SiteInvitationIdentity;
}

/**
 * This interface was referenced by `SiteInvitation`'s JSON-Schema via the
 * `create.schema` link.
 */
export interface SiteInvitationCreateSchema {
  data: {
    type: SiteInvitationType;
    attributes: {
      /** Email */
      email: string;
    };
    relationships: {
      /** Role */
      role: {
        data: RoleData;
      };
    };
  };
}

/**
 * This interface was referenced by `SiteInvitation`'s JSON-Schema via the
 * `create.targetSchema` link.
 */
export interface SiteInvitationCreateTargetSchema {
  data: SiteInvitation;
}

/**
 * This interface was referenced by `SiteInvitation`'s JSON-Schema via the
 * `update.schema` link.
 */
export interface SiteInvitationUpdateSchema {
  data: {
    type: SiteInvitationType;
    id: SiteInvitationIdentity;
    relationships: {
      /** Role */
      role?: {
        data: RoleData;
      };
    };
  };
}

/**
 * This interface was referenced by `SiteInvitation`'s JSON-Schema via the
 * `update.targetSchema` link.
 */
export interface SiteInvitationUpdateTargetSchema {
  data: SiteInvitation;
}

/**
 * This interface was referenced by `SiteInvitation`'s JSON-Schema via the
 * `instances.targetSchema` link.
 */
export interface SiteInvitationInstancesTargetSchema {
  data: SiteInvitation[];
}

/**
 * This interface was referenced by `SiteInvitation`'s JSON-Schema via the
 * `self.targetSchema` link.
 */
export interface SiteInvitationSelfTargetSchema {
  data: SiteInvitation;
}

/**
 * This interface was referenced by `SiteInvitation`'s JSON-Schema via the
 * `destroy.targetSchema` link.
 */
export interface SiteInvitationDestroyTargetSchema {
  data: SiteInvitation;
}

/**
 * Session track users movements in the administrative area, and allows locking
 * a record when editing it.
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "editing_session".
 */
export interface EditingSession {
  type: EditingSessionType;
  id: EditingSessionIdentity;
  attributes: EditingSessionAttributes;
  relationships: EditingSessionRelationships;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `EditingSession`'s JSON-Schema via the
 * `definition` "attributes".
 */
export interface EditingSessionAttributes {
  /** User entered at */
  last_activity_at: string | null;
  /** User locked record at */
  locked_at: string | null;
}

/**
 * JSON API links
 *
 * This interface was referenced by `EditingSession`'s JSON-Schema via the
 * `definition` "relationships".
 */
export interface EditingSessionRelationships {
  /** The active item in the session */
  active_item: {
    data: ItemData;
  };
  /** The item type of the active item in the session */
  active_item_type: {
    data: ItemTypeData;
  };
  /** The entity (account/editor/access token) who has accessed the record */
  editor: {
    data: AccountData | AccessTokenData | UserData;
  };
}

/**
 * JSON API data
 *
 * This interface was referenced by `EditingSession`'s JSON-Schema via the
 * `definition` "data".
 */
export interface EditingSessionData {
  type: EditingSessionType;
  id: EditingSessionIdentity;
}

/**
 * This interface was referenced by `EditingSession`'s JSON-Schema via the
 * `instances.targetSchema` link.
 */
export interface EditingSessionInstancesTargetSchema {
  data: EditingSession[];
}

/**
 * This interface was referenced by `EditingSession`'s JSON-Schema via the
 * `update.schema` link.
 */
export interface EditingSessionUpdateSchema {
  data:
    | {
        /** JSON API type */
        type: 'editing_session_enter_item';
        /** JSON API relationships */
        relationships: {
          /** The active item in the session */
          item: {
            data: ItemData;
          };
        };
      }
    | {
        /** JSON API type */
        type: 'editing_session_take_over_item';
        /** JSON API relationships */
        relationships: {
          /** The active item in the session */
          item: {
            data: ItemData;
          };
        };
      }
    | {
        /** JSON API type */
        type: 'editing_session_lock_item';
        /** JSON API relationships */
        relationships: {
          /** The active item in the session */
          item: {
            data: ItemData;
          };
        };
      }
    | {
        /** JSON API type */
        type: 'editing_session_unlock_item';
      };
}

/**
 * This interface was referenced by `EditingSession`'s JSON-Schema via the
 * `update.targetSchema` link.
 */
export interface EditingSessionUpdateTargetSchema {
  data: EditingSession;
}

/**
 * This interface was referenced by `EditingSession`'s JSON-Schema via the
 * `destroy.targetSchema` link.
 */
export interface EditingSessionDestroyTargetSchema {
  data: EditingSession;
}

/**
 * A Single Sign-On group exists when a DatoCMS project is connected to an
 * Identity Provider. These groups can be used to link DatoCMS roles to the
 * Identity Provider's groups.
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "sso_group".
 */
export interface SsoGroup {
  type: SsoGroupType;
  id: SsoGroupIdentity;
  attributes: SsoGroupAttributes;
  relationships: SsoGroupRelationships;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `SsoGroup`'s JSON-Schema via the
 * `definition` "attributes".
 */
export interface SsoGroupAttributes {
  /** Name of the group */
  name: string;
  /**
   * When an user belongs to multiple groups, the role associated to the group
   * with the highest priority will be used
   */
  priority: number;
}

/**
 * JSON API links
 *
 * This interface was referenced by `SsoGroup`'s JSON-Schema via the
 * `definition` "relationships".
 */
export interface SsoGroupRelationships {
  /** Sso Group's role */
  role: {
    data: RoleData;
  };
  /** Group members */
  users: {
    data: SsoUserData[];
  };
}

/**
 * This interface was referenced by `SsoGroup`'s JSON-Schema via the
 * `instances.targetSchema` link.
 */
export interface SsoGroupInstancesTargetSchema {
  data: SsoGroup[];
}

/**
 * This interface was referenced by `SsoGroup`'s JSON-Schema via the
 * `copy_roles.targetSchema` link.
 */
export interface SsoGroupCopyRolesTargetSchema {
  data: SsoGroup;
}

/**
 * This interface was referenced by `SsoGroup`'s JSON-Schema via the
 * `update.schema` link.
 */
export interface SsoGroupUpdateSchema {
  data: {
    type: SsoGroupType;
    id: SsoGroupIdentity;
    attributes: {
      /**
       * When an user belongs to multiple groups, the role associated to the
       * group with the highest priority will be used
       */
      priority: number;
    };
    relationships: {
      /** Sso Group's role */
      role: {
        data: RoleData;
      };
    };
  };
}

/**
 * This interface was referenced by `SsoGroup`'s JSON-Schema via the
 * `update.targetSchema` link.
 */
export interface SsoGroupUpdateTargetSchema {
  data: SsoGroup;
}

/**
 * This interface was referenced by `SsoGroup`'s JSON-Schema via the
 * `destroy.targetSchema` link.
 */
export interface SsoGroupDestroyTargetSchema {
  data: SsoGroup;
}

/**
 * Represents the Single Sign-on settings of the current DatoCMS project
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "sso_settings".
 */
export interface SsoSettings {
  type: SsoSettingsType;
  id: SsoSettingsIdentity;
  attributes: SsoSettingsAttributes;
  relationships: SsoSettingsRelationships;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `SsoSettings`'s JSON-Schema via the
 * `definition` "attributes".
 */
export interface SsoSettingsAttributes {
  /** URL of Identity Provider SAML Metadata endpoint */
  idp_saml_metadata_url: null | string;
  /** DatoCMS SCIM base URL */
  scim_base_url: string;
  /** DatoCMS SAML ACS URL */
  saml_acs_url: string;
  /** DatoCMS SAML Metadata URL */
  sp_saml_metadata_url: string;
  /** DatoCMS SAML Base URL */
  sp_saml_base_url: string;
  /** DatoCMS SAML Token */
  saml_token: string;
  /** DatoCMS SCIM API Token */
  scim_api_token?: string;
}

/**
 * JSON API links
 *
 * This interface was referenced by `SsoSettings`'s JSON-Schema via the
 * `definition` "relationships".
 */
export interface SsoSettingsRelationships {
  /** The default role assigned to SSO users that do not belong to any SSO group */
  default_role: {
    data: null | RoleData;
  };
}

/**
 * JSON API data
 *
 * This interface was referenced by `SsoSettings`'s JSON-Schema via the
 * `definition` "data".
 */
export interface SsoSettingsData {
  type: SsoSettingsType;
  id: SsoSettingsIdentity;
}

/**
 * This interface was referenced by `SsoSettings`'s JSON-Schema via the
 * `self.targetSchema` link.
 */
export interface SsoSettingsSelfTargetSchema {
  data: SsoSettings;
}

/**
 * This interface was referenced by `SsoSettings`'s JSON-Schema via the
 * `generate_token.targetSchema` link.
 */
export interface SsoSettingsGenerateTokenTargetSchema {
  data: {
    id: SsoSettingsIdentity;
    /** JSON API type field */
    type: 'sso_token';
    attributes: {
      /** DatoCMS SCIM API Token */
      scim_api_token: string;
    };
    [k: string]: unknown;
  };
}

/**
 * This interface was referenced by `SsoSettings`'s JSON-Schema via the
 * `update.schema` link.
 */
export interface SsoSettingsUpdateSchema {
  data: {
    type: SsoSettingsType;
    id?: SsoSettingsIdentity;
    attributes?: {
      /** URL of Identity Provider SAML Metadata endpoint */
      idp_saml_metadata_url: null | string;
    };
    relationships: {
      /**
       * The default role assigned to SSO users that do not belong to any SSO
       * group
       */
      default_role: {
        data: RoleData;
      };
    };
  };
}

/**
 * This interface was referenced by `SsoSettings`'s JSON-Schema via the
 * `update.targetSchema` link.
 */
export interface SsoSettingsUpdateTargetSchema {
  data: SsoSettings;
}

/**
 * Represents the white-label settings of the current DatoCMS project
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "white_label_settings".
 */
export interface WhiteLabelSettings {
  type: WhiteLabelSettingsType;
  id: WhiteLabelSettingsIdentity;
  attributes: WhiteLabelSettingsAttributes;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `WhiteLabelSettings`'s JSON-Schema via the
 * `definition` "attributes".
 */
export interface WhiteLabelSettingsAttributes {
  /**
   * URL of custom I18n messages. The :locale placeholder represents the current
   * DatoCMS UI locale.
   */
  custom_i18n_messages_template_url: null | string;
}

/**
 * JSON API data
 *
 * This interface was referenced by `WhiteLabelSettings`'s JSON-Schema via the
 * `definition` "data".
 */
export interface WhiteLabelSettingsData {
  type: WhiteLabelSettingsType;
  id: WhiteLabelSettingsIdentity;
}

/**
 * This interface was referenced by `WhiteLabelSettings`'s JSON-Schema via the
 * `self.targetSchema` link.
 */
export interface WhiteLabelSettingsSelfTargetSchema {
  data: WhiteLabelSettings;
}

/**
 * This interface was referenced by `WhiteLabelSettings`'s JSON-Schema via the
 * `update.schema` link.
 */
export interface WhiteLabelSettingsUpdateSchema {
  data: {
    type: WhiteLabelSettingsType;
    id?: WhiteLabelSettingsIdentity;
    attributes?: {
      /**
       * URL of custom I18n messages. The :locale placeholder represents the
       * current DatoCMS UI locale.
       */
      custom_i18n_messages_template_url: null | string;
    };
  };
}

/**
 * This interface was referenced by `WhiteLabelSettings`'s JSON-Schema via the
 * `update.targetSchema` link.
 */
export interface WhiteLabelSettingsUpdateTargetSchema {
  data: WhiteLabelSettings;
}

/**
 * Info that can be accessed by unauthorized users
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "public_info".
 */
export interface PublicInfo {
  type: PublicInfoType;
  id: PublicInfoIdentity;
  attributes: PublicInfoAttributes;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `PublicInfo`'s JSON-Schema via the
 * `definition` "attributes".
 */
export interface PublicInfoAttributes {
  /** Site name */
  name: string;
  /** Specifies the Single Sign-on URL to reach */
  sso_saml_init_url: null | string;
  /** Specifies the logo url if present */
  logo_url: null | string;
  /** Specifies whether the project is in white-label mode */
  white_label: boolean;
  /**
   * Template URL to download specific I18n messages (for white-label projects
   * only)
   */
  custom_i18n_messages_template_url: null | string;
  /** Specifies the color-scheme for the project */
  theme: {
    primary_color?: {
      red: number;
      green: number;
      blue: number;
      alpha: number;
      [k: string]: unknown;
    };
    light_color?: {
      red: number;
      green: number;
      blue: number;
      alpha: number;
      [k: string]: unknown;
    };
    accent_color?: {
      red: number;
      green: number;
      blue: number;
      alpha: number;
      [k: string]: unknown;
    };
    dark_color?: {
      red: number;
      green: number;
      blue: number;
      alpha: number;
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  /** Additional information (only returned on authenticated requests) */
  extras: null | {
    blocks_depth: number;
    blocks_per_item: number;
    maximum_single_upload_bytes: number;
    [k: string]: unknown;
  };
}

/**
 * JSON API data
 *
 * This interface was referenced by `PublicInfo`'s JSON-Schema via the
 * `definition` "data".
 */
export interface PublicInfoData {
  type: PublicInfoType;
  id: PublicInfoIdentity;
}

/**
 * This interface was referenced by `PublicInfo`'s JSON-Schema via the
 * `self.targetSchema` link.
 */
export interface PublicInfoSelfTargetSchema {
  data: PublicInfo;
}

/**
 * DatoCMS resources usage organized by day
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "daily_usage".
 */
export interface DailyUsage {
  type: DailyUsageType;
  id: DailyUsageIdentity;
  attributes: DailyUsageAttributes;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `DailyUsage`'s JSON-Schema via the
 * `definition` "attributes".
 */
export interface DailyUsageAttributes {
  /** The date the data are referring to */
  date: string;
  /** Number of API calls to content delivery API */
  cda_api_calls: number;
  /** Number of API calls to content management API */
  cma_api_calls: number;
  /** Content delivery API traffic */
  cda_traffic_bytes: number;
  /** Uploads requests traffic */
  assets_traffic_bytes: number;
  /** Video streaming seconds */
  mux_delivered_seconds: number;
}

/**
 * JSON API data
 *
 * This interface was referenced by `DailyUsage`'s JSON-Schema via the
 * `definition` "data".
 */
export interface DailyUsageData {
  type: DailyUsageType;
  id: DailyUsageIdentity;
}

/**
 * This interface was referenced by `DailyUsage`'s JSON-Schema via the
 * `instances.targetSchema` link.
 */
export interface DailyUsageInstancesTargetSchema {
  data: DailyUsage;
}

/**
 * You can use counters to analyze your project's data consumption over a period
 * of time. Counters are especially useful if your project is exceeding its API
 * calls/traffic quota limits, to better understand where and how requests are
 * originating. Counters are updated every minute, so you can debug in real-time
 * the results of your changes.
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "usage_counter".
 */
export interface UsageCounter {
  type: UsageCounterType;
  id: UsageCounterIdentity;
  attributes: UsageCounterAttributes;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `UsageCounter`'s JSON-Schema via the
 * `definition` "attributes".
 */
export interface UsageCounterAttributes {
  result: {
    /** Occurrence */
    value: string;
    /** Counter for the specified occurrence */
    counter: number;
  }[];
}

/**
 * JSON API data
 *
 * This interface was referenced by `UsageCounter`'s JSON-Schema via the
 * `definition` "data".
 */
export interface UsageCounterData {
  type: UsageCounterType;
  id: UsageCounterIdentity;
}

/**
 * This interface was referenced by `UsageCounter`'s JSON-Schema via the
 * `self.targetSchema` link.
 */
export interface UsageCounterSelfTargetSchema {
  data: UsageCounter;
}

/**
 * All the project's upload tags
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "upload_tag".
 */
export interface UploadTag {
  type: UploadTagType;
  id: UploadTagIdentity;
  attributes: UploadTagAttributes;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `UploadTag`'s JSON-Schema via the
 * `definition` "attributes".
 */
export interface UploadTagAttributes {
  /** The tag name */
  name: string;
}

/**
 * JSON API data
 *
 * This interface was referenced by `UploadTag`'s JSON-Schema via the
 * `definition` "data".
 */
export interface UploadTagData {
  type: UploadTagType;
  id: UploadTagIdentity;
}

/**
 * This interface was referenced by `UploadTag`'s JSON-Schema via the
 * `instances.targetSchema` link.
 */
export interface UploadTagInstancesTargetSchema {
  data: UploadTag[];
  meta: {
    total_count: number;
  };
}

/**
 * This interface was referenced by `UploadTag`'s JSON-Schema via the
 * `create.schema` link.
 */
export interface UploadTagCreateSchema {
  data: {
    type: UploadTagType;
    attributes: {
      /** The tag name */
      name: string;
    };
  };
}

/**
 * This interface was referenced by `UploadTag`'s JSON-Schema via the
 * `create.targetSchema` link.
 */
export interface UploadTagCreateTargetSchema {
  data: UploadTag;
}

/**
 * All the site's upload automatically generated tags
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "upload_smart_tag".
 */
export interface UploadSmartTag {
  type: UploadSmartTagType;
  id: UploadSmartTagIdentity;
  attributes: UploadSmartTagAttributes;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `UploadSmartTag`'s JSON-Schema via the
 * `definition` "attributes".
 */
export interface UploadSmartTagAttributes {
  /** The tag name */
  name: string;
}

/**
 * JSON API data
 *
 * This interface was referenced by `UploadSmartTag`'s JSON-Schema via the
 * `definition` "data".
 */
export interface UploadSmartTagData {
  type: UploadSmartTagType;
  id: UploadSmartTagIdentity;
}

/**
 * This interface was referenced by `UploadSmartTag`'s JSON-Schema via the
 * `instances.targetSchema` link.
 */
export interface UploadSmartTagInstancesTargetSchema {
  data: UploadSmartTag[];
  meta: {
    total_count: number;
  };
}

/**
 * A site represents a specific DatoCMS administrative area
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "site".
 */
export interface Site {
  type: SiteType;
  id: SiteIdentity;
  attributes: SiteAttributes;
  relationships: SiteRelationships;
  meta: SiteMeta;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `Site`'s JSON-Schema via the `definition`
 * "attributes".
 */
export interface SiteAttributes {
  /** Site name */
  name: string;
  /** Administrative area custom domain */
  domain: string | null;
  /** Google API Key to be used by the LatLon widget */
  google_maps_api_token: string | null;
  /** Imgix host */
  imgix_host: string | null;
  /** DatoCMS internal domain for the administrative area */
  internal_domain: string | null;
  /** Available locales */
  locales: [string, ...string[]];
  /** Site default timezone */
  timezone: string;
  /** Whether the website needs to be indexed by search engines or not */
  no_index: boolean;
  /** The upload id for the favicon */
  favicon: string | null;
  /** Specifies the last time when a change of data occurred */
  last_data_change_at: null | string;
  /**
   * Specifies whether all users of this site need to authenticate using
   * two-factor authentication
   */
  require_2fa: boolean;
  /** Specifies whether you want IPs to be tracked in the Project usages section */
  ip_tracking_enabled: boolean;
  /** Specifies the theme to use in administrative area */
  theme: {
    primary_color: {
      red: number;
      green: number;
      blue: number;
      alpha: number;
      [k: string]: unknown;
    };
    light_color: {
      red: number;
      green: number;
      blue: number;
      alpha: number;
      [k: string]: unknown;
    };
    accent_color: {
      red: number;
      green: number;
      blue: number;
      alpha: number;
      [k: string]: unknown;
    };
    dark_color: {
      red: number;
      green: number;
      blue: number;
      alpha: number;
      [k: string]: unknown;
    };
    /** The site logo */
    logo: string | null;
    [k: string]: unknown;
  };
  /** Specifies default global settings */
  global_seo: {
    /** Site name, used in social sharing */
    site_name?: string;
    fallback_seo?: {
      title: string;
      description: string;
      /** The id of the image */
      image: null | string;
      /** Determines how a Twitter link preview is shown */
      twitter_card?: null | ('summary' | 'summary_large_image');
      [k: string]: unknown;
    };
    /** Title meta tag suffix */
    title_suffix?: null | string;
    /** URL of facebook page */
    facebook_page_url?: null | string;
    /** Twitter account associated to website */
    twitter_account?: null | string;
    [k: string]: unknown;
  } | null;
}

/**
 * JSON API links
 *
 * This interface was referenced by `Site`'s JSON-Schema via the `definition`
 * "relationships".
 */
export interface SiteRelationships {
  account: {
    data: AccountData;
  };
  item_types: {
    /** The list item types for the site */
    data: ItemTypeData[];
  };
}

/**
 * Meta attributes
 *
 * This interface was referenced by `Site`'s JSON-Schema via the `definition`
 * "meta".
 */
export interface SiteMeta {
  /** Whether the Improved API Timezone Management option is active or not */
  improved_timezone_management: boolean;
}

/**
 * JSON API data
 *
 * This interface was referenced by `Site`'s JSON-Schema via the `definition`
 * "data".
 */
export interface SiteData {
  type: SiteType;
  id: SiteIdentity;
}

/**
 * This interface was referenced by `Site`'s JSON-Schema via the
 * `self.targetSchema` link.
 */
export interface SiteSelfTargetSchema {
  data: Site;
  included?: (ItemType | Field | Upload | Fieldset | Item | Account)[];
}

/**
 * This interface was referenced by `Site`'s JSON-Schema via the `update.schema`
 * link.
 */
export interface SiteUpdateSchema {
  data: {
    type: SiteType;
    id?: SiteIdentity;
    attributes: {
      /** Whether the website needs to be indexed by search engines or not */
      no_index?: boolean;
      /** The upload id for the favicon */
      favicon?: string | null;
      /** Specifies default global settings */
      global_seo?: {
        /** Site name, used in social sharing */
        site_name?: string;
        fallback_seo?: {
          title: string;
          description: string;
          /** The id of the image */
          image: null | string;
          /** Determines how a Twitter link preview is shown */
          twitter_card?: null | ('summary' | 'summary_large_image');
          [k: string]: unknown;
        };
        /** Title meta tag suffix */
        title_suffix?: null | string;
        /** URL of facebook page */
        facebook_page_url?: null | string;
        /** Twitter account associated to website */
        twitter_account?: null | string;
        [k: string]: unknown;
      } | null;
      /** Site name */
      name?: string;
      /** Specifies the theme to use in administrative area */
      theme?: {
        primary_color: {
          red: number;
          green: number;
          blue: number;
          alpha: number;
          [k: string]: unknown;
        };
        light_color: {
          red: number;
          green: number;
          blue: number;
          alpha: number;
          [k: string]: unknown;
        };
        accent_color: {
          red: number;
          green: number;
          blue: number;
          alpha: number;
          [k: string]: unknown;
        };
        dark_color: {
          red: number;
          green: number;
          blue: number;
          alpha: number;
          [k: string]: unknown;
        };
        /** The site logo */
        logo: string | null;
        [k: string]: unknown;
      };
      /** Available locales */
      locales?: [string, ...string[]];
      /** Site default timezone */
      timezone?: string;
      /**
       * Specifies whether all users of this site need to authenticate using
       * two-factor authentication
       */
      require_2fa?: boolean;
      /**
       * Specifies whether you want IPs to be tracked in the Project usages
       * section
       */
      ip_tracking_enabled?: boolean;
    };
    meta?: {
      /** Whether the Improved API Timezone Management option is active or not */
      improved_timezone_management?: boolean;
    };
    relationships?: {
      sso_default_role?: {
        data: RoleData;
      };
    };
  };
}

/**
 * This interface was referenced by `Site`'s JSON-Schema via the
 * `update.targetSchema` link.
 */
export interface SiteUpdateTargetSchema {
  data: Job;
}

/**
 * This interface was referenced by `Site`'s JSON-Schema via the
 * `update.jobSchema` link.
 */
export interface SiteUpdateJobSchema {
  data: Site;
}

/**
 * This interface was referenced by `Site`'s JSON-Schema via the
 * `activate_improved_timezone_management.targetSchema` link.
 */
export interface SiteActivateImprovedTimezoneManagementTargetSchema {
  data: Job;
}

/**
 * This interface was referenced by `Site`'s JSON-Schema via the
 * `activate_improved_timezone_management.jobSchema` link.
 */
export interface SiteActivateImprovedTimezoneManagementJobSchema {
  data: Site;
}

/**
 * Through workflows it is possible to set up a precise state machine able to
 * bring a draft content up to the final publication (and beyond), through a
 * series of intermediate, fully customizable approval steps.
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema via the `definition`
 * "workflow".
 */
export interface Workflow {
  type: WorkflowType;
  id: WorkflowIdentity;
  attributes: WorkflowAttributes;
}

/**
 * JSON API attributes
 *
 * This interface was referenced by `Workflow`'s JSON-Schema via the
 * `definition` "attributes".
 */
export interface WorkflowAttributes {
  /** The name of the workflow */
  name: string;
  /** The stages of the workflow */
  stages: [
    {
      /** ID of the stage */
      id: string;
      /** Name of the stage */
      name: string;
      /** Description of the stage */
      description?: string | null;
      /** Whether this is the initial stage or not */
      initial?: boolean;
    },
    ...{
      /** ID of the stage */
      id: string;
      /** Name of the stage */
      name: string;
      /** Description of the stage */
      description?: string | null;
      /** Whether this is the initial stage or not */
      initial?: boolean;
    }[],
  ];
}

/**
 * This interface was referenced by `Workflow`'s JSON-Schema via the
 * `create.schema` link.
 */
export interface WorkflowCreateSchema {
  data: {
    type: WorkflowType;
    id: WorkflowIdentity;
    /** JSON API attributes */
    attributes: {
      /** The name of the workflow */
      name: string;
      /** The stages of the workflow */
      stages: [
        {
          /** ID of the stage */
          id: string;
          /** Name of the stage */
          name: string;
          /** Description of the stage */
          description?: string | null;
          /** Whether this is the initial stage or not */
          initial?: boolean;
        },
        ...{
          /** ID of the stage */
          id: string;
          /** Name of the stage */
          name: string;
          /** Description of the stage */
          description?: string | null;
          /** Whether this is the initial stage or not */
          initial?: boolean;
        }[],
      ];
    };
  };
}

/**
 * This interface was referenced by `Workflow`'s JSON-Schema via the
 * `create.targetSchema` link.
 */
export interface WorkflowCreateTargetSchema {
  data: Workflow;
}

/**
 * This interface was referenced by `Workflow`'s JSON-Schema via the
 * `update.schema` link.
 */
export interface WorkflowUpdateSchema {
  data: {
    type: WorkflowType;
    id: WorkflowIdentity;
    /** JSON API attributes */
    attributes?: {
      /** The name of the workflow */
      name?: string;
      /** The stages of the workflow */
      stages?: [
        {
          /** ID of the stage */
          id: string;
          /** Name of the stage */
          name: string;
          /** Description of the stage */
          description?: string | null;
          /** Whether this is the initial stage or not */
          initial?: boolean;
        },
        ...{
          /** ID of the stage */
          id: string;
          /** Name of the stage */
          name: string;
          /** Description of the stage */
          description?: string | null;
          /** Whether this is the initial stage or not */
          initial?: boolean;
        }[],
      ];
    };
  };
}

/**
 * This interface was referenced by `Workflow`'s JSON-Schema via the
 * `update.targetSchema` link.
 */
export interface WorkflowUpdateTargetSchema {
  data: Workflow;
}

/**
 * This interface was referenced by `Workflow`'s JSON-Schema via the
 * `instances.targetSchema` link.
 */
export interface WorkflowInstancesTargetSchema {
  data: Workflow[];
}

/**
 * This interface was referenced by `Workflow`'s JSON-Schema via the
 * `self.targetSchema` link.
 */
export interface WorkflowSelfTargetSchema {
  data: Workflow;
}
